2012-07-17 11:02:26.8446|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public class Tesss {

    public string Jola {get;set;}
    private string Mola {get;set;}

} 
2012-07-17 11:02:26.8686|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public class Tesss {

    public string Jola {get;set;}
    private string Mola {get;set;}

} 
2012-07-17 11:02:49.9010|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 11:02:49.9640|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 11:21:49.1601|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public class Tesss {

    public string Jola {get;set;}
    private string Mola {get;set;}

} 
2012-07-17 11:21:49.1821|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public class Tesss {

    public string Jola {get;set;}
    private string Mola {get;set;}

} 
2012-07-17 11:22:10.9534|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 11:22:21.0089|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 11:22:32.5556|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public class Tesss {

    public string Jola {get;set;}
    private string Mola {get;set;}

} 
2012-07-17 11:22:32.5656|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public class Tesss {

    public string Jola {get;set;}
    private string Mola {get;set;}

} 
2012-07-17 11:23:00.9722|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 11:23:11.0328|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 11:23:49.9750|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}
}

public partial class Tesss {
    public int Ciocia {get;set}
} 
2012-07-17 11:23:49.9750|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}
}

public partial class Tesss {
    public int Ciocia {get;set}
} 
2012-07-17 11:23:49.9750|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": "Error parsing code file.",
  "Errors": [
    "<strong>Error</strong>: Invalid accessor body `}', expecting `;' or `{'"
  ],
  "Code": null
} 
2012-07-17 11:24:00.9027|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": false,
  "message": "Error parsning code file",
  "errors": [
    "<strong>Error</strong>: Invalid accessor body `}', expecting `;' or `{'"
  ]
} 
2012-07-17 11:24:14.4344|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}
}

public partial class Tesss {
    public int Ciocia {get;set;}
} 
2012-07-17 11:24:14.4344|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}
}

public partial class Tesss {
    public int Ciocia {get;set;}
} 
2012-07-17 11:24:30.6874|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 11:24:40.6889|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 11:33:02.4356|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}
}

public partial class Tesss {
    public int Ciocia {get;set;}
} 
2012-07-17 11:33:02.4356|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}
}

public partial class Tesss {
    public int Ciocia {get;set;}
} 
2012-07-17 11:33:14.5823|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 11:33:18.0455|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 11:39:06.1624|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}
}

public partial class Tesss {
    public int Ciocia {get;set;}
} 
2012-07-17 11:39:06.1704|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}
}

public partial class Tesss {
    public int Ciocia {get;set;}
} 
2012-07-17 11:44:16.6352|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 11:44:26.6938|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 11:45:11.0453|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}
}

public partial class Tesss {
    public int Ciocia {get;set;}
}
public partial class Tesss {
    public Baaaaa Macica {get;set;}
} 
2012-07-17 11:45:11.0543|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}
}

public partial class Tesss {
    public int Ciocia {get;set;}
}
public partial class Tesss {
    public Baaaaa Macica {get;set;}
} 
2012-07-17 11:45:54.3358|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 11:45:58.1250|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.macica = ko.observable(data.Macica);\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 12:05:04.7806|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}
}

public partial class Tesss {
    public int Ciocia {get;set;}
}
public partial class Tesss {
    public Baaaaa Macica {get;set;}
} 
2012-07-17 12:05:04.7886|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}
}

public partial class Tesss {
    public int Ciocia {get;set;}
}
public partial class Tesss {
    public Baaaaa Macica {get;set;}
} 
2012-07-17 12:05:14.0061|DEBUG|CSharp2Knockout.Controllers.HomeController|Handling exception on Controller 
2012-07-17 12:05:24.0287|ERROR|CSharp2Knockout.Controllers.HomeController|Error occured on controller, handling it as AjaxResult System.ArgumentNullException: Value cannot be null.
Parameter name: compilationUnit
   at ICSharpCode.NRefactory.CSharp.Resolver.CSharpAstResolver..ctor(ICompilation compilation, CompilationUnit compilationUnit, CSharpParsedFile parsedFile)
   at CSharp2Knockout.Services.NRefactory.NRefactoryVisitor.SetSemanticElement(PropertyDeclaration propertyDeclaration) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 122
   at CSharp2Knockout.Services.NRefactory.NRefactoryVisitor.VisitPropertyDeclaration(PropertyDeclaration propertyDeclaration) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 109
   at ICSharpCode.NRefactory.CSharp.PropertyDeclaration.AcceptVisitor(IAstVisitor visitor)
   at ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor.VisitChildren(AstNode node)
   at ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor.VisitTypeDeclaration(TypeDeclaration typeDeclaration)
   at CSharp2Knockout.Services.NRefactory.NRefactoryVisitor.VisitTypeDeclaration(TypeDeclaration typeDeclaration) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 88
   at ICSharpCode.NRefactory.CSharp.TypeDeclaration.AcceptVisitor(IAstVisitor visitor)
   at ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor.VisitChildren(AstNode node)
   at ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor.VisitCompilationUnit(CompilationUnit unit)
   at CSharp2Knockout.Services.NRefactory.NRefactoryVisitor.VisitCompilationUnit(CompilationUnit unit) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 190
   at ICSharpCode.NRefactory.CSharp.CompilationUnit.AcceptVisitor(IAstVisitor visitor)
   at CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion.ToKnockoutVm(String code, TranslateOptions options) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 65
   at CSharp2Knockout.Controllers.HomeController.Index(String csharp, TranslateOptions options) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Controllers\HomeController.cs:line 24
   at lambda_method(Closure , ControllerBase , Object[] )
   at System.Web.Mvc.ActionMethodDispatcher.Execute(ControllerBase controller, Object[] parameters)
   at System.Web.Mvc.ReflectedActionDescriptor.Execute(ControllerContext controllerContext, IDictionary`2 parameters)
   at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary`2 parameters)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41()
   at System.Web.Mvc.Async.AsyncResultWrapper.<>c__DisplayClass8`1.<BeginSynchronous>b__7(IAsyncResult _)
   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<BeginInvokeActionMethodWithFilters>b__36(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethodWithFilters(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<>c__DisplayClass2a.<BeginInvokeAction>b__20()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<BeginInvokeAction>b__22(IAsyncResult asyncResult)
2012-07-17 12:05:56.2775|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}
}

public partial class Tesss {
    public int Ciocia {get;set;}
}
public partial class Tesss {
    public Baaaaa Macica {get;set;}
} 
2012-07-17 12:05:56.2855|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}
}

public partial class Tesss {
    public int Ciocia {get;set;}
}
public partial class Tesss {
    public Baaaaa Macica {get;set;}
} 
2012-07-17 12:06:24.0631|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 12:06:34.1207|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.macica = ko.observable(data.Macica);\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 12:07:18.8852|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}
}

public partial class Tesss {
    public int Ciocia {get;set;}
}
public partial class Tesss {
    public Baaaaa Macica {get;set;}
} 
2012-07-17 12:07:18.9042|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}
}

public partial class Tesss {
    public int Ciocia {get;set;}
}
public partial class Tesss {
    public Baaaaa Macica {get;set;}
} 
2012-07-17 12:07:39.3524|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 12:07:49.4090|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.macica = ko.observable(data.Macica);\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 12:10:11.0271|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}
}

public partial class Tesss {
    public int Ciocia {get;set;}
}
public partial class Tesss {
    public Baaaaa Macica {get;set;}
} 
2012-07-17 12:10:11.0361|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}
}

public partial class Tesss {
    public int Ciocia {get;set;}
}
public partial class Tesss {
    public Baaaaa Macica {get;set;}
} 
2012-07-17 12:12:06.8647|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 12:12:16.9223|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.macica = ko.observable(data.Macica);\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 12:17:07.0919|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}
}

public partial class Tesss {
    public int Ciocia {get;set;}
}
public partial class Tesss {
    public Baaaaa Macica {get;set;}
} 
2012-07-17 12:17:07.1089|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}
}

public partial class Tesss {
    public int Ciocia {get;set;}
}
public partial class Tesss {
    public Baaaaa Macica {get;set;}
} 
2012-07-17 12:18:00.4249|DEBUG|CSharp2Knockout.Controllers.HomeController|Handling exception on Controller 
2012-07-17 12:18:00.4249|ERROR|CSharp2Knockout.Controllers.HomeController|Error occured on controller, handling it as AjaxResult System.ArgumentNullException: Value cannot be null.
Parameter name: type
   at System.Activator.CreateInstance(Type type, Boolean nonPublic)
   at System.Activator.CreateInstance(Type type)
   at CSharp2Knockout.Services.NRefactory.NRefactoryVisitor.SetSemanticElement(PropertyDeclaration propertyDeclaration) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 134
   at CSharp2Knockout.Services.NRefactory.NRefactoryVisitor.VisitPropertyDeclaration(PropertyDeclaration propertyDeclaration) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 111
   at ICSharpCode.NRefactory.CSharp.PropertyDeclaration.AcceptVisitor(IAstVisitor visitor)
   at ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor.VisitChildren(AstNode node)
   at ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor.VisitTypeDeclaration(TypeDeclaration typeDeclaration)
   at CSharp2Knockout.Services.NRefactory.NRefactoryVisitor.VisitTypeDeclaration(TypeDeclaration typeDeclaration) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 90
   at ICSharpCode.NRefactory.CSharp.TypeDeclaration.AcceptVisitor(IAstVisitor visitor)
   at ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor.VisitChildren(AstNode node)
   at ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor.VisitCompilationUnit(CompilationUnit unit)
   at CSharp2Knockout.Services.NRefactory.NRefactoryVisitor.VisitCompilationUnit(CompilationUnit unit) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 190
   at ICSharpCode.NRefactory.CSharp.CompilationUnit.AcceptVisitor(IAstVisitor visitor)
   at CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion.ToKnockoutVm(String code, TranslateOptions options) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 67
   at CSharp2Knockout.Controllers.HomeController.Index(String csharp, TranslateOptions options) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Controllers\HomeController.cs:line 24
   at lambda_method(Closure , ControllerBase , Object[] )
   at System.Web.Mvc.ActionMethodDispatcher.Execute(ControllerBase controller, Object[] parameters)
   at System.Web.Mvc.ReflectedActionDescriptor.Execute(ControllerContext controllerContext, IDictionary`2 parameters)
   at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary`2 parameters)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41()
   at System.Web.Mvc.Async.AsyncResultWrapper.<>c__DisplayClass8`1.<BeginSynchronous>b__7(IAsyncResult _)
   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<BeginInvokeActionMethodWithFilters>b__36(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethodWithFilters(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<>c__DisplayClass2a.<BeginInvokeAction>b__20()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<BeginInvokeAction>b__22(IAsyncResult asyncResult)
2012-07-17 12:21:37.1463|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable1 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public MyCollection: IList<int> {} 
2012-07-17 12:21:37.1573|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable1 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public MyCollection: IList<int> {} 
2012-07-17 12:21:37.2563|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": "Error parsing code file.",
  "Errors": [
    "<strong>Error</strong>: The type `Tesss' already contains a definition for `IntNullable1'",
    "<strong>Error</strong>: Unexpected symbol `MyCollection', expecting `class', `delegate', `enum', `interface', `partial', or `struct'"
  ],
  "Code": null
} 
2012-07-17 12:21:40.6415|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": false,
  "message": "Error parsning code file",
  "errors": [
    "<strong>Error</strong>: The type `Tesss' already contains a definition for `IntNullable1'",
    "<strong>Error</strong>: Unexpected symbol `MyCollection', expecting `class', `delegate', `enum', `interface', `partial', or `struct'"
  ]
} 
2012-07-17 12:21:51.3752|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public MyCollection: IList<int> {} 
2012-07-17 12:21:51.3752|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public MyCollection: IList<int> {} 
2012-07-17 12:21:51.3752|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": "Error parsing code file.",
  "Errors": [
    "<strong>Error</strong>: Unexpected symbol `MyCollection', expecting `class', `delegate', `enum', `interface', `partial', or `struct'"
  ],
  "Code": null
} 
2012-07-17 12:21:54.1083|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": false,
  "message": "Error parsning code file",
  "errors": [
    "<strong>Error</strong>: Unexpected symbol `MyCollection', expecting `class', `delegate', `enum', `interface', `partial', or `struct'"
  ]
} 
2012-07-17 12:21:59.4606|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 12:21:59.4606|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 12:23:48.4768|DEBUG|CSharp2Knockout.Controllers.HomeController|Handling exception on Controller 
2012-07-17 12:23:58.4984|ERROR|CSharp2Knockout.Controllers.HomeController|Error occured on controller, handling it as AjaxResult System.MissingMethodException: Cannot create an abstract class.
   at System.RuntimeTypeHandle.CreateInstance(RuntimeType type, Boolean publicOnly, Boolean noCheck, Boolean& canBeCached, RuntimeMethodHandleInternal& ctor, Boolean& bNeedSecurityCheck)
   at System.RuntimeType.CreateInstanceSlow(Boolean publicOnly, Boolean skipCheckThis, Boolean fillCache)
   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean skipVisibilityChecks, Boolean skipCheckThis, Boolean fillCache)
   at System.Activator.CreateInstance(Type type, Boolean nonPublic)
   at System.Activator.CreateInstance(Type type)
   at CSharp2Knockout.Services.NRefactory.NRefactoryVisitor.SetSemanticElement(PropertyDeclaration propertyDeclaration) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 142
   at CSharp2Knockout.Services.NRefactory.NRefactoryVisitor.VisitPropertyDeclaration(PropertyDeclaration propertyDeclaration) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 111
   at ICSharpCode.NRefactory.CSharp.PropertyDeclaration.AcceptVisitor(IAstVisitor visitor)
   at ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor.VisitChildren(AstNode node)
   at ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor.VisitTypeDeclaration(TypeDeclaration typeDeclaration)
   at CSharp2Knockout.Services.NRefactory.NRefactoryVisitor.VisitTypeDeclaration(TypeDeclaration typeDeclaration) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 90
   at ICSharpCode.NRefactory.CSharp.TypeDeclaration.AcceptVisitor(IAstVisitor visitor)
   at ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor.VisitChildren(AstNode node)
   at ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor.VisitCompilationUnit(CompilationUnit unit)
   at CSharp2Knockout.Services.NRefactory.NRefactoryVisitor.VisitCompilationUnit(CompilationUnit unit) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 199
   at ICSharpCode.NRefactory.CSharp.CompilationUnit.AcceptVisitor(IAstVisitor visitor)
   at CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion.ToKnockoutVm(String code, TranslateOptions options) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 67
   at CSharp2Knockout.Controllers.HomeController.Index(String csharp, TranslateOptions options) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Controllers\HomeController.cs:line 24
   at lambda_method(Closure , ControllerBase , Object[] )
   at System.Web.Mvc.ActionMethodDispatcher.Execute(ControllerBase controller, Object[] parameters)
   at System.Web.Mvc.ReflectedActionDescriptor.Execute(ControllerContext controllerContext, IDictionary`2 parameters)
   at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary`2 parameters)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41()
   at System.Web.Mvc.Async.AsyncResultWrapper.<>c__DisplayClass8`1.<BeginSynchronous>b__7(IAsyncResult _)
   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<BeginInvokeActionMethodWithFilters>b__36(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethodWithFilters(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<>c__DisplayClass2a.<BeginInvokeAction>b__20()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<BeginInvokeAction>b__22(IAsyncResult asyncResult)
2012-07-17 12:24:10.2841|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 12:24:10.2921|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 12:25:54.6811|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 12:26:04.7406|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.table1 = ko.observable(data.Table1);\r\n\tself.table2 = ko.observable(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observable(data.Table4);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 12:26:47.4761|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 12:26:47.4941|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 12:27:55.1730|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 12:28:05.2335|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observable(data.Table1);\r\n\tself.table2 = ko.observable(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observable(data.Table4);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 12:31:44.9061|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 12:31:44.9241|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 12:32:27.8406|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 12:32:31.1637|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observable(data.Table1);\r\n\tself.table2 = ko.observable(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observable(data.Table4);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 12:37:45.4347|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 12:37:45.4347|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 12:38:03.5248|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 12:38:04.7868|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observable(data.Table1);\r\n\tself.table2 = ko.observable(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observable(data.Table4);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 12:54:00.5975|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 12:54:00.6265|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 12:54:31.9393|DEBUG|CSharp2Knockout.Controllers.HomeController|Handling exception on Controller 
2012-07-17 12:54:41.9399|ERROR|CSharp2Knockout.Controllers.HomeController|Error occured on controller, handling it as AjaxResult System.MissingMethodException: No parameterless constructor defined for this object.
   at System.RuntimeTypeHandle.CreateInstance(RuntimeType type, Boolean publicOnly, Boolean noCheck, Boolean& canBeCached, RuntimeMethodHandleInternal& ctor, Boolean& bNeedSecurityCheck)
   at System.RuntimeType.CreateInstanceSlow(Boolean publicOnly, Boolean skipCheckThis, Boolean fillCache)
   at System.RuntimeType.CreateInstanceDefaultCtor(Boolean publicOnly, Boolean skipVisibilityChecks, Boolean skipCheckThis, Boolean fillCache)
   at System.Activator.CreateInstance(Type type, Boolean nonPublic)
   at System.Activator.CreateInstance(Type type)
   at CSharp2Knockout.Services.NRefactory.NRefactoryVisitor.<SetSemanticElement>b__4(IType t) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 135
   at CSharp2Knockout.Services.NRefactory.NRefactoryVisitor.SetSemanticElement(PropertyDeclaration propertyDeclaration) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 154
   at CSharp2Knockout.Services.NRefactory.NRefactoryVisitor.VisitPropertyDeclaration(PropertyDeclaration propertyDeclaration) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 111
   at ICSharpCode.NRefactory.CSharp.PropertyDeclaration.AcceptVisitor(IAstVisitor visitor)
   at ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor.VisitChildren(AstNode node)
   at ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor.VisitTypeDeclaration(TypeDeclaration typeDeclaration)
   at CSharp2Knockout.Services.NRefactory.NRefactoryVisitor.VisitTypeDeclaration(TypeDeclaration typeDeclaration) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 90
   at ICSharpCode.NRefactory.CSharp.TypeDeclaration.AcceptVisitor(IAstVisitor visitor)
   at ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor.VisitChildren(AstNode node)
   at ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor.VisitCompilationUnit(CompilationUnit unit)
   at CSharp2Knockout.Services.NRefactory.NRefactoryVisitor.VisitCompilationUnit(CompilationUnit unit) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 209
   at ICSharpCode.NRefactory.CSharp.CompilationUnit.AcceptVisitor(IAstVisitor visitor)
   at CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion.ToKnockoutVm(String code, TranslateOptions options) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 67
   at CSharp2Knockout.Controllers.HomeController.Index(String csharp, TranslateOptions options) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Controllers\HomeController.cs:line 24
   at lambda_method(Closure , ControllerBase , Object[] )
   at System.Web.Mvc.ActionMethodDispatcher.Execute(ControllerBase controller, Object[] parameters)
   at System.Web.Mvc.ReflectedActionDescriptor.Execute(ControllerContext controllerContext, IDictionary`2 parameters)
   at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary`2 parameters)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41()
   at System.Web.Mvc.Async.AsyncResultWrapper.<>c__DisplayClass8`1.<BeginSynchronous>b__7(IAsyncResult _)
   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<BeginInvokeActionMethodWithFilters>b__36(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethodWithFilters(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<>c__DisplayClass2a.<BeginInvokeAction>b__20()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<BeginInvokeAction>b__22(IAsyncResult asyncResult)
2012-07-17 12:56:32.9962|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 12:56:33.0152|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;

public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 13:00:38.0042|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 13:00:48.0638|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observable(data.Table1);\r\n\tself.table2 = ko.observable(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observable(data.Table4);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 13:04:01.5759|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 13:04:01.5839|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 13:05:08.8447|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 13:05:10.7578|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observable(data.Table1);\r\n\tself.table2 = ko.observable(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observable(data.Table4);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 13:09:51.8659|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 13:09:51.8829|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 13:11:01.9929|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 13:11:03.5520|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observable(data.Table1);\r\n\tself.table2 = ko.observable(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observable(data.Table4);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 16:56:57.0972|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 16:56:57.1052|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 16:57:12.7451|DEBUG|CSharp2Knockout.Controllers.HomeController|Handling exception on Controller 
2012-07-17 16:57:12.7691|ERROR|CSharp2Knockout.Controllers.HomeController|Error occured on controller, handling it as AjaxResult System.NullReferenceException: Object reference not set to an instance of an object.
   at CSharp2Knockout.Services.NRefactory.NRefactoryVisitor.SetSemanticElement(PropertyDeclaration propertyDeclaration) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 162
   at CSharp2Knockout.Services.NRefactory.NRefactoryVisitor.VisitPropertyDeclaration(PropertyDeclaration propertyDeclaration) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 115
   at ICSharpCode.NRefactory.CSharp.PropertyDeclaration.AcceptVisitor(IAstVisitor visitor)
   at ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor.VisitChildren(AstNode node)
   at ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor.VisitTypeDeclaration(TypeDeclaration typeDeclaration)
   at CSharp2Knockout.Services.NRefactory.NRefactoryVisitor.VisitTypeDeclaration(TypeDeclaration typeDeclaration) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 93
   at ICSharpCode.NRefactory.CSharp.TypeDeclaration.AcceptVisitor(IAstVisitor visitor)
   at ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor.VisitChildren(AstNode node)
   at ICSharpCode.NRefactory.CSharp.DepthFirstAstVisitor.VisitCompilationUnit(CompilationUnit unit)
   at CSharp2Knockout.Services.NRefactory.NRefactoryVisitor.VisitCompilationUnit(CompilationUnit unit) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 224
   at ICSharpCode.NRefactory.CSharp.CompilationUnit.AcceptVisitor(IAstVisitor visitor)
   at CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion.ToKnockoutVm(String code, TranslateOptions options) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 67
   at CSharp2Knockout.Controllers.HomeController.Index(String csharp, TranslateOptions options) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Controllers\HomeController.cs:line 24
   at lambda_method(Closure , ControllerBase , Object[] )
   at System.Web.Mvc.ActionMethodDispatcher.Execute(ControllerBase controller, Object[] parameters)
   at System.Web.Mvc.ReflectedActionDescriptor.Execute(ControllerContext controllerContext, IDictionary`2 parameters)
   at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary`2 parameters)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41()
   at System.Web.Mvc.Async.AsyncResultWrapper.<>c__DisplayClass8`1.<BeginSynchronous>b__7(IAsyncResult _)
   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<BeginInvokeActionMethodWithFilters>b__36(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethodWithFilters(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<>c__DisplayClass2a.<BeginInvokeAction>b__20()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<BeginInvokeAction>b__22(IAsyncResult asyncResult)
2012-07-17 17:30:56.8859|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 17:30:56.8939|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 17:31:24.7335|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 17:31:24.8165|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observable(data.Table1);\r\n\tself.table2 = ko.observable(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observable(data.Table4);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 17:32:40.3958|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 17:32:40.4148|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 17:34:59.7408|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 17:34:59.7958|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observable(data.Table1);\r\n\tself.table2 = ko.observable(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observable(data.Table4);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 17:35:12.6525|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 17:35:12.6605|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 17:35:28.2904|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 17:35:28.3474|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observable(data.Table1);\r\n\tself.table2 = ko.observable(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observable(data.Table4);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 17:40:57.7903|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 17:40:57.7983|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {} 
2012-07-17 17:41:37.3695|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 17:41:37.4305|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observable(data.Table1);\r\n\tself.table2 = ko.observable(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observable(data.Table4);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 17:51:48.7915|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 17:51:48.8025|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 17:52:17.3101|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 17:52:21.8304|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observable(data.Table1);\r\n\tself.table2 = ko.observable(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observable(data.Table4);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 17:52:28.4538|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 17:52:28.4538|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 17:52:59.8166|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 17:52:59.8166|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var Tesssttttt = {\r\n\tola: 'Ola',\r\n\tmaja: 'Maja'\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observable(data.Table1);\r\n\tself.table2 = ko.observable(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observable(data.Table4);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 18:03:37.0000|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:03:37.0200|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:04:03.2285|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 18:04:06.3787|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var Tesssttttt = {\r\n\tola: 'Ola',\r\n\tmaja: 'Maja'\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\tself.someVal = ko.observable(data.SomeVal);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observable(data.Table1);\r\n\tself.table2 = ko.observable(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observable(data.Table4);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 18:04:48.9071|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:04:48.9071|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:06:36.4853|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 18:06:36.4853|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\tself.dt1 = ko.observable(data.Dt1);\r\n\tself.dt2 = ko.observable(data.Dt2);\r\n\tself.dt3 = ko.observable(data.Dt3);\r\n\tself.g = ko.observable(data.G);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.someVal = ko.observable(data.SomeVal);\r\n\tself.table1 = ko.observable(data.Table1);\r\n\tself.table2 = ko.observable(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observable(data.Table4);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 18:06:40.7855|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:06:40.7855|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:07:47.8364|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 18:07:47.8364|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\tself.dt1 = ko.observable(data.Dt1);\r\n\tself.dt2 = ko.observable(data.Dt2);\r\n\tself.dt3 = ko.observable(data.Dt3);\r\n\tself.g = ko.observable(data.G);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.someVal = ko.observable(data.SomeVal);\r\n\tself.table1 = ko.observable(data.Table1);\r\n\tself.table2 = ko.observable(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observable(data.Table4);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 18:08:24.4244|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:08:24.4324|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:09:48.1532|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 18:09:48.2422|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\tself.dt1 = ko.observable(data.Dt1);\r\n\tself.dt2 = ko.observable(data.Dt2);\r\n\tself.dt3 = ko.observable(data.Dt3);\r\n\tself.g = ko.observable(data.G);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.someVal = ko.observable(data.SomeVal);\r\n\tself.table1 = ko.observable(data.Table1);\r\n\tself.table2 = ko.observable(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observable(data.Table4);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 18:31:41.8314|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:31:41.8404|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:31:53.0780|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 18:31:53.1440|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\tself.dt1 = ko.observable(data.Dt1);\r\n\tself.dt2 = ko.observable(data.Dt2);\r\n\tself.dt3 = ko.observable(data.Dt3);\r\n\tself.g = ko.observable(data.G);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.someVal = ko.observable(data.SomeVal);\r\n\tself.table1 = ko.observable(data.Table1);\r\n\tself.table2 = ko.observable(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observable(data.Table4);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 18:32:04.7687|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:32:04.7767|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:32:38.1466|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 18:32:38.2196|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\tself.dt1 = ko.observable(data.Dt1);\r\n\tself.dt2 = ko.observable(data.Dt2);\r\n\tself.dt3 = ko.observable(data.Dt3);\r\n\tself.g = ko.observable(data.G);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.someVal = ko.observable(data.SomeVal);\r\n\tself.table1 = ko.observable(data.Table1);\r\n\tself.table2 = ko.observable(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observable(data.Table4);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 18:34:49.8211|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:34:49.8391|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:35:06.2721|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": false,
  "Message": null,
  "Errors": [],
  "Code": null
} 
2012-07-17 18:35:06.3321|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "success": true,
  "message": "var Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\tself.dt1 = ko.observable(data.Dt1);\r\n\tself.dt2 = ko.observable(data.Dt2);\r\n\tself.dt3 = ko.observable(data.Dt3);\r\n\tself.g = ko.observable(data.G);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.someVal = ko.observable(data.SomeVal);\r\n\tself.table1 = ko.observable(data.Table1);\r\n\tself.table2 = ko.observable(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observable(data.Table4);\r\n};\r\n\r\n",
  "errors": []
} 
2012-07-17 18:49:27.6513|DEBUG|CSharp2Knockout.Controllers.HomeController|Handling exception on Controller 
2012-07-17 18:49:27.6593|ERROR|CSharp2Knockout.Controllers.HomeController|Error occured on controller, handling it as AjaxResult System.IO.FileLoadException: Could not load file or assembly 'System.ComponentModel.DataAnnotations, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35' or one of its dependencies. The handle is invalid. (Exception from HRESULT: 0x80070006 (E_HANDLE))
File name: 'System.ComponentModel.DataAnnotations, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'
   at System.RuntimeTypeHandle.GetTypeByName(String name, Boolean throwOnError, Boolean ignoreCase, Boolean reflectionOnly, StackCrawlMarkHandle stackMark, Boolean loadTypeFromPartialName, ObjectHandleOnStack type)
   at System.RuntimeTypeHandle.GetTypeByName(String name, Boolean throwOnError, Boolean ignoreCase, Boolean reflectionOnly, StackCrawlMark& stackMark, Boolean loadTypeFromPartialName)
   at System.RuntimeType.GetType(String typeName, Boolean throwOnError, Boolean ignoreCase, Boolean reflectionOnly, StackCrawlMark& stackMark)
   at System.Type.GetType(String typeName)
   at Newtonsoft.Json.Serialization.JsonTypeReflector.GetMetadataTypeAttributeType()
   at Newtonsoft.Json.Serialization.JsonTypeReflector.GetAssociateMetadataTypeFromAttribute(Type type)
   at Newtonsoft.Json.Utilities.ThreadSafeStore`2.AddValue(TKey key)
   at Newtonsoft.Json.Utilities.ThreadSafeStore`2.Get(TKey key)
   at Newtonsoft.Json.Serialization.JsonTypeReflector.GetAssociatedMetadataType(Type type)
   at Newtonsoft.Json.Serialization.JsonTypeReflector.GetAttribute[T](Type type)
   at Newtonsoft.Json.Serialization.JsonTypeReflector.GetAttribute[T](ICustomAttributeProvider attributeProvider)
   at Newtonsoft.Json.Utilities.ThreadSafeStore`2.AddValue(TKey key)
   at Newtonsoft.Json.Utilities.ThreadSafeStore`2.Get(TKey key)
   at Newtonsoft.Json.Serialization.CachedAttributeGetter`1.GetAttribute(ICustomAttributeProvider type)
   at Newtonsoft.Json.Serialization.JsonTypeReflector.GetJsonContainerAttribute(Type type)
   at Newtonsoft.Json.Serialization.JsonTypeReflector.GetJsonObjectAttribute(Type type)
   at Newtonsoft.Json.Serialization.DefaultContractResolver.CreateContract(Type objectType)
   at Newtonsoft.Json.Serialization.DefaultContractResolver.ResolveContract(Type type)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.GetContractSafe(Object value)
   at Newtonsoft.Json.Serialization.JsonSerializerInternalWriter.Serialize(JsonWriter jsonWriter, Object value)
   at Newtonsoft.Json.JsonSerializer.SerializeInternal(JsonWriter jsonWriter, Object value)
   at Newtonsoft.Json.JsonSerializer.Serialize(JsonWriter jsonWriter, Object value)
   at Newtonsoft.Json.JsonConvert.SerializeObject(Object value, Formatting formatting, JsonSerializerSettings settings)
   at Newtonsoft.Json.JsonConvert.SerializeObject(Object value, Formatting formatting)
   at System.ObjectExtensions.ToFormattedJson(Object this) in D:\Projects\Gutek\CSharp2Knockout\src\Gutek.Common\Extensions\System.Object.cs:line 19
   at CSharp2Knockout.Controllers.HomeController.Index(String csharp, TranslateOptions options) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Controllers\HomeController.cs:line 21
   at lambda_method(Closure , ControllerBase , Object[] )
   at System.Web.Mvc.ActionMethodDispatcher.Execute(ControllerBase controller, Object[] parameters)
   at System.Web.Mvc.ReflectedActionDescriptor.Execute(ControllerContext controllerContext, IDictionary`2 parameters)
   at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary`2 parameters)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41()
   at System.Web.Mvc.Async.AsyncResultWrapper.<>c__DisplayClass8`1.<BeginSynchronous>b__7(IAsyncResult _)
   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<BeginInvokeActionMethodWithFilters>b__36(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethodWithFilters(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<>c__DisplayClass2a.<BeginInvokeAction>b__20()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<BeginInvokeAction>b__22(IAsyncResult asyncResult)

=== Pre-bind state information ===
LOG: User = Gutek-PC\Gutek
LOG: DisplayName = System.ComponentModel.DataAnnotations, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35
 (Fully-specified)
LOG: Appbase = file:///D:/Projects/Gutek/CSharp2Knockout/src/CSharp2Knockout/
LOG: Initial PrivatePath = D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\bin
Calling assembly : Newtonsoft.Json, Version=4.5.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed.
===
LOG: This bind starts in default load context.
LOG: Using application configuration file: D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\web.config
LOG: Using host configuration file: 
LOG: Using machine configuration file from C:\Windows\Microsoft.NET\Framework\v4.0.30319\config\machine.config.
LOG: Version redirect found in framework config: 3.5.0.0 redirected to 4.0.0.0.

2012-07-17 18:50:16.6771|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:50:16.6881|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:50:17.2982|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": true,
  "Message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.dt1 = ko.observable(data.Dt1);\r\n\tself.dt2 = ko.observable(data.Dt2);\r\n\tself.dt3 = ko.observable(data.Dt3);\r\n\tself.g = ko.observable(data.G);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\tself.someVal = ko.observable(data.SomeVal);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observableArray(data.Table1);\r\n\tself.table2 = ko.observableArray(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observableArray(data.Table4);\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 18:50:17.2982|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "Success": true,
  "Message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.dt1 = ko.observable(data.Dt1);\r\n\tself.dt2 = ko.observable(data.Dt2);\r\n\tself.dt3 = ko.observable(data.Dt3);\r\n\tself.g = ko.observable(data.G);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\tself.someVal = ko.observable(data.SomeVal);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observableArray(data.Table1);\r\n\tself.table2 = ko.observableArray(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observableArray(data.Table4);\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 18:50:56.9954|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:50:56.9964|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:50:57.3245|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": true,
  "Message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.dt1 = ko.observable(data.Dt1);\r\n\tself.dt2 = ko.observable(data.Dt2);\r\n\tself.dt3 = ko.observable(data.Dt3);\r\n\tself.g = ko.observable(data.G);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\tself.someVal = ko.observable(data.SomeVal);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observableArray(data.Table1);\r\n\tself.table2 = ko.observableArray(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observableArray(data.Table4);\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 18:50:57.3245|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "Success": true,
  "Message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.dt1 = ko.observable(data.Dt1);\r\n\tself.dt2 = ko.observable(data.Dt2);\r\n\tself.dt3 = ko.observable(data.Dt3);\r\n\tself.g = ko.observable(data.G);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\tself.someVal = ko.observable(data.SomeVal);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observableArray(data.Table1);\r\n\tself.table2 = ko.observableArray(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observableArray(data.Table4);\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 18:51:07.2380|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:51:07.2380|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:51:07.5540|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": true,
  "Message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.dt1 = ko.observable(data.Dt1);\r\n\tself.dt2 = ko.observable(data.Dt2);\r\n\tself.dt3 = ko.observable(data.Dt3);\r\n\tself.g = ko.observable(data.G);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\tself.someVal = ko.observable(data.SomeVal);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observableArray(data.Table1);\r\n\tself.table2 = ko.observableArray(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observableArray(data.Table4);\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 18:51:07.5540|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "Success": true,
  "Message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.dt1 = ko.observable(data.Dt1);\r\n\tself.dt2 = ko.observable(data.Dt2);\r\n\tself.dt3 = ko.observable(data.Dt3);\r\n\tself.g = ko.observable(data.G);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\tself.someVal = ko.observable(data.SomeVal);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observableArray(data.Table1);\r\n\tself.table2 = ko.observableArray(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observableArray(data.Table4);\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 18:53:35.2225|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:53:35.2305|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:53:35.8815|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": true,
  "Message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.dt1 = ko.observable(data.Dt1);\r\n\tself.dt2 = ko.observable(data.Dt2);\r\n\tself.dt3 = ko.observable(data.Dt3);\r\n\tself.g = ko.observable(data.G);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\tself.someVal = ko.observable(data.SomeVal);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observableArray(data.Table1);\r\n\tself.table2 = ko.observableArray(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observableArray(data.Table4);\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 18:53:35.8815|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "Success": true,
  "Message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.dt1 = ko.observable(data.Dt1);\r\n\tself.dt2 = ko.observable(data.Dt2);\r\n\tself.dt3 = ko.observable(data.Dt3);\r\n\tself.g = ko.observable(data.G);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\tself.someVal = ko.observable(data.SomeVal);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observableArray(data.Table1);\r\n\tself.table2 = ko.observableArray(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observableArray(data.Table4);\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 18:53:48.5593|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": false,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:53:48.5593|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": false,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:53:48.8973|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\tself.dt1 = ko.observable(data.Dt1);\r\n\tself.dt2 = ko.observable(data.Dt2);\r\n\tself.dt3 = ko.observable(data.Dt3);\r\n\tself.g = ko.observable(data.G);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.someVal = ko.observable(data.SomeVal);\r\n\tself.table1 = ko.observableArray(data.Table1);\r\n\tself.table2 = ko.observableArray(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observableArray(data.Table4);\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 18:53:48.8973|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\tself.dt1 = ko.observable(data.Dt1);\r\n\tself.dt2 = ko.observable(data.Dt2);\r\n\tself.dt3 = ko.observable(data.Dt3);\r\n\tself.g = ko.observable(data.G);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.someVal = ko.observable(data.SomeVal);\r\n\tself.table1 = ko.observableArray(data.Table1);\r\n\tself.table2 = ko.observableArray(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observableArray(data.Table4);\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 18:54:20.7061|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": false,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:54:20.7061|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": false,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:54:20.9841|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.ciocia = ko.observable(data.ciocia);\r\n\tself.ciocia2 = ko.observable(data.ciocia2);\r\n\tself.ciocia3 = ko.observable(data.ciocia3);\r\n\tself.ciocia4 = ko.observable(data.ciocia4);\r\n\tself.dt1 = ko.observable(data.dt1);\r\n\tself.dt2 = ko.observable(data.dt2);\r\n\tself.dt3 = ko.observable(data.dt3);\r\n\tself.g = ko.observable(data.g);\r\n\tself.intNullable1 = ko.observable(data.intNullable1);\r\n\tself.intNullable2 = ko.observable(data.intNullable2);\r\n\tself.intNullable3 = ko.observable(data.intNullable3);\r\n\tself.jola = ko.observable(data.jola);\r\n\tself.someVal = ko.observable(data.someVal);\r\n\tself.table1 = ko.observableArray(data.table1);\r\n\tself.table2 = ko.observableArray(data.table2);\r\n\tself.table3 = ko.observableArray(data.table3);\r\n\tself.table4 = ko.observableArray(data.table4);\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 18:54:20.9841|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.ciocia = ko.observable(data.ciocia);\r\n\tself.ciocia2 = ko.observable(data.ciocia2);\r\n\tself.ciocia3 = ko.observable(data.ciocia3);\r\n\tself.ciocia4 = ko.observable(data.ciocia4);\r\n\tself.dt1 = ko.observable(data.dt1);\r\n\tself.dt2 = ko.observable(data.dt2);\r\n\tself.dt3 = ko.observable(data.dt3);\r\n\tself.g = ko.observable(data.g);\r\n\tself.intNullable1 = ko.observable(data.intNullable1);\r\n\tself.intNullable2 = ko.observable(data.intNullable2);\r\n\tself.intNullable3 = ko.observable(data.intNullable3);\r\n\tself.jola = ko.observable(data.jola);\r\n\tself.someVal = ko.observable(data.someVal);\r\n\tself.table1 = ko.observableArray(data.table1);\r\n\tself.table2 = ko.observableArray(data.table2);\r\n\tself.table3 = ko.observableArray(data.table3);\r\n\tself.table4 = ko.observableArray(data.table4);\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 18:54:41.1063|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:54:41.1083|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:54:47.5896|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 18:54:47.5896|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 18:59:23.7734|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:59:23.7814|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 18:59:24.3995|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\ttself.ciocia = ko.observable(data.ciocia);\r\n\t\ttself.ciocia2 = ko.observable(data.ciocia2);\r\n\t\ttself.ciocia3 = ko.observable(data.ciocia3);\r\n\t\ttself.ciocia4 = ko.observable(data.ciocia4);\r\n\t\ttself.dt1 = ko.observable(data.dt1);\r\n\t\ttself.dt2 = ko.observable(data.dt2);\r\n\t\ttself.dt3 = ko.observable(data.dt3);\r\n\t\ttself.g = ko.observable(data.g);\r\n\t\ttself.intNullable1 = ko.observable(data.intNullable1);\r\n\t\ttself.intNullable2 = ko.observable(data.intNullable2);\r\n\t\ttself.intNullable3 = ko.observable(data.intNullable3);\r\n\t\ttself.jola = ko.observable(data.jola);\r\n\t\ttself.someVal = ko.observable(data.someVal);\r\n\t\tself.table1 = ko.observableArray(data.table1);\r\n\t\tself.table2 = ko.observableArray(data.table2);\r\n\t\tself.table3 = ko.observableArray(data.table3);\r\n\t\tself.table4 = ko.observableArray(data.table4);\r\n\t} else {\r\n\t\ttself.ciocia = ko.observable(data.ciocia);\r\n\t\ttself.ciocia2 = ko.observable(data.ciocia2);\r\n\t\ttself.ciocia3 = ko.observable(data.ciocia3);\r\n\t\ttself.ciocia4 = ko.observable(data.ciocia4);\r\n\t\ttself.dt1 = ko.observable(data.dt1);\r\n\t\ttself.dt2 = ko.observable(data.dt2);\r\n\t\ttself.dt3 = ko.observable(data.dt3);\r\n\t\ttself.g = ko.observable(data.g);\r\n\t\ttself.intNullable1 = ko.observable(data.intNullable1);\r\n\t\ttself.intNullable2 = ko.observable(data.intNullable2);\r\n\t\ttself.intNullable3 = ko.observable(data.intNullable3);\r\n\t\ttself.jola = ko.observable(data.jola);\r\n\t\ttself.someVal = ko.observable(data.someVal);\r\n\t\tself.table1 = ko.observableArray(data.table1);\r\n\t\tself.table2 = ko.observableArray(data.table2);\r\n\t\tself.table3 = ko.observableArray(data.table3);\r\n\t\tself.table4 = ko.observableArray(data.table4);\r\n\t}\r\n\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 18:59:24.3995|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\ttself.ciocia = ko.observable(data.ciocia);\r\n\t\ttself.ciocia2 = ko.observable(data.ciocia2);\r\n\t\ttself.ciocia3 = ko.observable(data.ciocia3);\r\n\t\ttself.ciocia4 = ko.observable(data.ciocia4);\r\n\t\ttself.dt1 = ko.observable(data.dt1);\r\n\t\ttself.dt2 = ko.observable(data.dt2);\r\n\t\ttself.dt3 = ko.observable(data.dt3);\r\n\t\ttself.g = ko.observable(data.g);\r\n\t\ttself.intNullable1 = ko.observable(data.intNullable1);\r\n\t\ttself.intNullable2 = ko.observable(data.intNullable2);\r\n\t\ttself.intNullable3 = ko.observable(data.intNullable3);\r\n\t\ttself.jola = ko.observable(data.jola);\r\n\t\ttself.someVal = ko.observable(data.someVal);\r\n\t\tself.table1 = ko.observableArray(data.table1);\r\n\t\tself.table2 = ko.observableArray(data.table2);\r\n\t\tself.table3 = ko.observableArray(data.table3);\r\n\t\tself.table4 = ko.observableArray(data.table4);\r\n\t} else {\r\n\t\ttself.ciocia = ko.observable(data.ciocia);\r\n\t\ttself.ciocia2 = ko.observable(data.ciocia2);\r\n\t\ttself.ciocia3 = ko.observable(data.ciocia3);\r\n\t\ttself.ciocia4 = ko.observable(data.ciocia4);\r\n\t\ttself.dt1 = ko.observable(data.dt1);\r\n\t\ttself.dt2 = ko.observable(data.dt2);\r\n\t\ttself.dt3 = ko.observable(data.dt3);\r\n\t\ttself.g = ko.observable(data.g);\r\n\t\ttself.intNullable1 = ko.observable(data.intNullable1);\r\n\t\ttself.intNullable2 = ko.observable(data.intNullable2);\r\n\t\ttself.intNullable3 = ko.observable(data.intNullable3);\r\n\t\ttself.jola = ko.observable(data.jola);\r\n\t\ttself.someVal = ko.observable(data.someVal);\r\n\t\tself.table1 = ko.observableArray(data.table1);\r\n\t\tself.table2 = ko.observableArray(data.table2);\r\n\t\tself.table3 = ko.observableArray(data.table3);\r\n\t\tself.table4 = ko.observableArray(data.table4);\r\n\t}\r\n\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 19:02:52.8544|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:02:52.8714|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:04:14.3621|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.ciocia = ko.observable(data.ciocia);\r\n\t\tself.ciocia2 = ko.observable(data.ciocia2);\r\n\t\tself.ciocia3 = ko.observable(data.ciocia3);\r\n\t\tself.ciocia4 = ko.observable(data.ciocia4);\r\n\t\tself.dt1 = ko.observable(data.dt1);\r\n\t\tself.dt2 = ko.observable(data.dt2);\r\n\t\tself.dt3 = ko.observable(data.dt3);\r\n\t\tself.g = ko.observable(data.g);\r\n\t\tself.intNullable1 = ko.observable(data.intNullable1);\r\n\t\tself.intNullable2 = ko.observable(data.intNullable2);\r\n\t\tself.intNullable3 = ko.observable(data.intNullable3);\r\n\t\tself.jola = ko.observable(data.jola);\r\n\t\tself.someVal = ko.observable(data.someVal);\r\n\t\tself.table1 = ko.observableArray(data.table1);\r\n\t\tself.table2 = ko.observableArray(data.table2);\r\n\t\tself.table3 = ko.observableArray(data.table3);\r\n\t\tself.table4 = ko.observableArray(data.table4);\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 19:04:14.3621|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.ciocia = ko.observable(data.ciocia);\r\n\t\tself.ciocia2 = ko.observable(data.ciocia2);\r\n\t\tself.ciocia3 = ko.observable(data.ciocia3);\r\n\t\tself.ciocia4 = ko.observable(data.ciocia4);\r\n\t\tself.dt1 = ko.observable(data.dt1);\r\n\t\tself.dt2 = ko.observable(data.dt2);\r\n\t\tself.dt3 = ko.observable(data.dt3);\r\n\t\tself.g = ko.observable(data.g);\r\n\t\tself.intNullable1 = ko.observable(data.intNullable1);\r\n\t\tself.intNullable2 = ko.observable(data.intNullable2);\r\n\t\tself.intNullable3 = ko.observable(data.intNullable3);\r\n\t\tself.jola = ko.observable(data.jola);\r\n\t\tself.someVal = ko.observable(data.someVal);\r\n\t\tself.table1 = ko.observableArray(data.table1);\r\n\t\tself.table2 = ko.observableArray(data.table2);\r\n\t\tself.table3 = ko.observableArray(data.table3);\r\n\t\tself.table4 = ko.observableArray(data.table4);\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 19:05:39.5999|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:05:39.6069|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:07:24.2669|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.ciocia = ko.observable(data.ciocia);\r\n\t\tself.ciocia2 = ko.observable(data.ciocia2);\r\n\t\tself.ciocia3 = ko.observable(data.ciocia3);\r\n\t\tself.ciocia4 = ko.observable(data.ciocia4);\r\n\t\tself.dt1 = ko.observable(data.dt1);\r\n\t\tself.dt2 = ko.observable(data.dt2);\r\n\t\tself.dt3 = ko.observable(data.dt3);\r\n\t\tself.g = ko.observable(data.g);\r\n\t\tself.intNullable1 = ko.observable(data.intNullable1);\r\n\t\tself.intNullable2 = ko.observable(data.intNullable2);\r\n\t\tself.intNullable3 = ko.observable(data.intNullable3);\r\n\t\tself.jola = ko.observable(data.jola);\r\n\t\tself.someVal = ko.observable(data.someVal);\r\n\t\tself.table1 = ko.observableArray(data.table1);\r\n\t\tself.table2 = ko.observableArray(data.table2);\r\n\t\tself.table3 = ko.observableArray(data.table3);\r\n\t\tself.table4 = ko.observableArray(data.table4);\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 19:07:34.2675|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.ciocia = ko.observable(data.ciocia);\r\n\t\tself.ciocia2 = ko.observable(data.ciocia2);\r\n\t\tself.ciocia3 = ko.observable(data.ciocia3);\r\n\t\tself.ciocia4 = ko.observable(data.ciocia4);\r\n\t\tself.dt1 = ko.observable(data.dt1);\r\n\t\tself.dt2 = ko.observable(data.dt2);\r\n\t\tself.dt3 = ko.observable(data.dt3);\r\n\t\tself.g = ko.observable(data.g);\r\n\t\tself.intNullable1 = ko.observable(data.intNullable1);\r\n\t\tself.intNullable2 = ko.observable(data.intNullable2);\r\n\t\tself.intNullable3 = ko.observable(data.intNullable3);\r\n\t\tself.jola = ko.observable(data.jola);\r\n\t\tself.someVal = ko.observable(data.someVal);\r\n\t\tself.table1 = ko.observableArray(data.table1);\r\n\t\tself.table2 = ko.observableArray(data.table2);\r\n\t\tself.table3 = ko.observableArray(data.table3);\r\n\t\tself.table4 = ko.observableArray(data.table4);\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 19:10:44.9744|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:10:44.9964|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:11:14.6211|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.ciocia = ko.observable(data.ciocia);\r\n\t\tself.ciocia2 = ko.observable(data.ciocia2);\r\n\t\tself.ciocia3 = ko.observable(data.ciocia3);\r\n\t\tself.ciocia4 = ko.observable(data.ciocia4);\r\n\t\tself.dt1 = ko.observable(data.dt1);\r\n\t\tself.dt2 = ko.observable(data.dt2);\r\n\t\tself.dt3 = ko.observable(data.dt3);\r\n\t\tself.g = ko.observable(data.g);\r\n\t\tself.intNullable1 = ko.observable(data.intNullable1);\r\n\t\tself.intNullable2 = ko.observable(data.intNullable2);\r\n\t\tself.intNullable3 = ko.observable(data.intNullable3);\r\n\t\tself.jola = ko.observable(data.jola);\r\n\t\tself.someVal = ko.observable(data.someVal);\r\n\t\tself.table1 = ko.observableArray(data.table1);\r\n\t\tself.table2 = ko.observableArray(data.table2);\r\n\t\tself.table3 = ko.observableArray(data.table3);\r\n\t\tself.table4 = ko.observableArray(data.table4);\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 19:11:24.6217|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.ciocia = ko.observable(data.ciocia);\r\n\t\tself.ciocia2 = ko.observable(data.ciocia2);\r\n\t\tself.ciocia3 = ko.observable(data.ciocia3);\r\n\t\tself.ciocia4 = ko.observable(data.ciocia4);\r\n\t\tself.dt1 = ko.observable(data.dt1);\r\n\t\tself.dt2 = ko.observable(data.dt2);\r\n\t\tself.dt3 = ko.observable(data.dt3);\r\n\t\tself.g = ko.observable(data.g);\r\n\t\tself.intNullable1 = ko.observable(data.intNullable1);\r\n\t\tself.intNullable2 = ko.observable(data.intNullable2);\r\n\t\tself.intNullable3 = ko.observable(data.intNullable3);\r\n\t\tself.jola = ko.observable(data.jola);\r\n\t\tself.someVal = ko.observable(data.someVal);\r\n\t\tself.table1 = ko.observableArray(data.table1);\r\n\t\tself.table2 = ko.observableArray(data.table2);\r\n\t\tself.table3 = ko.observableArray(data.table3);\r\n\t\tself.table4 = ko.observableArray(data.table4);\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 19:13:43.3736|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:13:43.3816|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:14:04.0948|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.ciocia = ko.observable(data.ciocia);\r\n\t\tself.ciocia2 = ko.observable(data.ciocia2);\r\n\t\tself.ciocia3 = ko.observable(data.ciocia3);\r\n\t\tself.ciocia4 = ko.observable(data.ciocia4);\r\n\t\tself.dt1 = ko.observable(data.dt1);\r\n\t\tself.dt2 = ko.observable(data.dt2);\r\n\t\tself.dt3 = ko.observable(data.dt3);\r\n\t\tself.g = ko.observable(data.g);\r\n\t\tself.intNullable1 = ko.observable(data.intNullable1);\r\n\t\tself.intNullable2 = ko.observable(data.intNullable2);\r\n\t\tself.intNullable3 = ko.observable(data.intNullable3);\r\n\t\tself.jola = ko.observable(data.jola);\r\n\t\tself.someVal = ko.observable(data.someVal);\r\n\t\tself.table1 = ko.observableArray(data.table1);\r\n\t\tself.table2 = ko.observableArray(data.table2);\r\n\t\tself.table3 = ko.observableArray(data.table3);\r\n\t\tself.table4 = ko.observableArray(data.table4);\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 19:14:14.0964|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.ciocia = ko.observable(data.ciocia);\r\n\t\tself.ciocia2 = ko.observable(data.ciocia2);\r\n\t\tself.ciocia3 = ko.observable(data.ciocia3);\r\n\t\tself.ciocia4 = ko.observable(data.ciocia4);\r\n\t\tself.dt1 = ko.observable(data.dt1);\r\n\t\tself.dt2 = ko.observable(data.dt2);\r\n\t\tself.dt3 = ko.observable(data.dt3);\r\n\t\tself.g = ko.observable(data.g);\r\n\t\tself.intNullable1 = ko.observable(data.intNullable1);\r\n\t\tself.intNullable2 = ko.observable(data.intNullable2);\r\n\t\tself.intNullable3 = ko.observable(data.intNullable3);\r\n\t\tself.jola = ko.observable(data.jola);\r\n\t\tself.someVal = ko.observable(data.someVal);\r\n\t\tself.table1 = ko.observableArray(data.table1);\r\n\t\tself.table2 = ko.observableArray(data.table2);\r\n\t\tself.table3 = ko.observableArray(data.table3);\r\n\t\tself.table4 = ko.observableArray(data.table4);\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 19:15:13.9938|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:15:14.0158|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:15:50.5849|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.ciocia = ko.observable(data.ciocia);\r\n\t\tself.ciocia2 = ko.observable(data.ciocia2);\r\n\t\tself.ciocia3 = ko.observable(data.ciocia3);\r\n\t\tself.ciocia4 = ko.observable(data.ciocia4);\r\n\t\tself.dt1 = ko.observable(data.dt1);\r\n\t\tself.dt2 = ko.observable(data.dt2);\r\n\t\tself.dt3 = ko.observable(data.dt3);\r\n\t\tself.g = ko.observable(data.g);\r\n\t\tself.intNullable1 = ko.observable(data.intNullable1);\r\n\t\tself.intNullable2 = ko.observable(data.intNullable2);\r\n\t\tself.intNullable3 = ko.observable(data.intNullable3);\r\n\t\tself.jola = ko.observable(data.jola);\r\n\t\tself.someVal = ko.observable(data.someVal);\r\n\t\tself.table1 = ko.observableArray(data.table1);\r\n\t\tself.table2 = ko.observableArray(data.table2);\r\n\t\tself.table3 = ko.observableArray(data.table3);\r\n\t\tself.table4 = ko.observableArray(data.table4);\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 19:16:00.5864|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.ciocia = ko.observable(data.ciocia);\r\n\t\tself.ciocia2 = ko.observable(data.ciocia2);\r\n\t\tself.ciocia3 = ko.observable(data.ciocia3);\r\n\t\tself.ciocia4 = ko.observable(data.ciocia4);\r\n\t\tself.dt1 = ko.observable(data.dt1);\r\n\t\tself.dt2 = ko.observable(data.dt2);\r\n\t\tself.dt3 = ko.observable(data.dt3);\r\n\t\tself.g = ko.observable(data.g);\r\n\t\tself.intNullable1 = ko.observable(data.intNullable1);\r\n\t\tself.intNullable2 = ko.observable(data.intNullable2);\r\n\t\tself.intNullable3 = ko.observable(data.intNullable3);\r\n\t\tself.jola = ko.observable(data.jola);\r\n\t\tself.someVal = ko.observable(data.someVal);\r\n\t\tself.table1 = ko.observableArray(data.table1);\r\n\t\tself.table2 = ko.observableArray(data.table2);\r\n\t\tself.table3 = ko.observableArray(data.table3);\r\n\t\tself.table4 = ko.observableArray(data.table4);\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 19:19:24.0121|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:19:24.0231|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:19:24.6571|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.ciocia = ko.observable(data.ciocia);\r\n\t\tself.ciocia2 = ko.observable(data.ciocia2);\r\n\t\tself.ciocia3 = ko.observable(data.ciocia3);\r\n\t\tself.ciocia4 = ko.observable(data.ciocia4);\r\n\t\tself.dt1 = ko.observable(data.dt1);\r\n\t\tself.dt2 = ko.observable(data.dt2);\r\n\t\tself.dt3 = ko.observable(data.dt3);\r\n\t\tself.g = ko.observable(data.g);\r\n\t\tself.intNullable1 = ko.observable(data.intNullable1);\r\n\t\tself.intNullable2 = ko.observable(data.intNullable2);\r\n\t\tself.intNullable3 = ko.observable(data.intNullable3);\r\n\t\tself.jola = ko.observable(data.jola);\r\n\t\tself.someVal = ko.observable(data.someVal);\r\n\t\tself.table1 = ko.observableArray(data.table1);\r\n\t\tself.table2 = ko.observableArray(data.table2);\r\n\t\tself.table3 = ko.observableArray(data.table3);\r\n\t\tself.table4 = ko.observableArray(data.table4);\r\n\t} else {\r\n\t\tself.ciocia = ko.observable(0);\r\n\t\tself.ciocia2 = ko.observable();\r\n\t\tself.ciocia3 = ko.observable(0);\r\n\t\tself.ciocia4 = ko.observable(0);\r\n\t\tself.dt1 = ko.observable(0001-01-01 00:00:00);\r\n\t\tself.dt2 = ko.observable();\r\n\t\tself.dt3 = ko.observable(00:00:00);\r\n\t\tself.g = ko.observable(00000000-0000-0000-0000-000000000000);\r\n\t\tself.intNullable1 = ko.observable();\r\n\t\tself.intNullable2 = ko.observable();\r\n\t\tself.intNullable3 = ko.observable();\r\n\t\tself.jola = ko.observable();\r\n\t\tself.someVal = ko.observable(Ola);\r\n\t\tself.table1 = ko.observableArray([]);\r\n\t\tself.table2 = ko.observableArray([]);\r\n\t\tself.table3 = ko.observableArray([]);\r\n\t\tself.table4 = ko.observableArray([]);\r\n\t}\r\n\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 19:19:24.6571|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.ciocia = ko.observable(data.ciocia);\r\n\t\tself.ciocia2 = ko.observable(data.ciocia2);\r\n\t\tself.ciocia3 = ko.observable(data.ciocia3);\r\n\t\tself.ciocia4 = ko.observable(data.ciocia4);\r\n\t\tself.dt1 = ko.observable(data.dt1);\r\n\t\tself.dt2 = ko.observable(data.dt2);\r\n\t\tself.dt3 = ko.observable(data.dt3);\r\n\t\tself.g = ko.observable(data.g);\r\n\t\tself.intNullable1 = ko.observable(data.intNullable1);\r\n\t\tself.intNullable2 = ko.observable(data.intNullable2);\r\n\t\tself.intNullable3 = ko.observable(data.intNullable3);\r\n\t\tself.jola = ko.observable(data.jola);\r\n\t\tself.someVal = ko.observable(data.someVal);\r\n\t\tself.table1 = ko.observableArray(data.table1);\r\n\t\tself.table2 = ko.observableArray(data.table2);\r\n\t\tself.table3 = ko.observableArray(data.table3);\r\n\t\tself.table4 = ko.observableArray(data.table4);\r\n\t} else {\r\n\t\tself.ciocia = ko.observable(0);\r\n\t\tself.ciocia2 = ko.observable();\r\n\t\tself.ciocia3 = ko.observable(0);\r\n\t\tself.ciocia4 = ko.observable(0);\r\n\t\tself.dt1 = ko.observable(0001-01-01 00:00:00);\r\n\t\tself.dt2 = ko.observable();\r\n\t\tself.dt3 = ko.observable(00:00:00);\r\n\t\tself.g = ko.observable(00000000-0000-0000-0000-000000000000);\r\n\t\tself.intNullable1 = ko.observable();\r\n\t\tself.intNullable2 = ko.observable();\r\n\t\tself.intNullable3 = ko.observable();\r\n\t\tself.jola = ko.observable();\r\n\t\tself.someVal = ko.observable(Ola);\r\n\t\tself.table1 = ko.observableArray([]);\r\n\t\tself.table2 = ko.observableArray([]);\r\n\t\tself.table3 = ko.observableArray([]);\r\n\t\tself.table4 = ko.observableArray([]);\r\n\t}\r\n\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 19:20:18.6912|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:20:18.7012|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:23:18.1445|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.ciocia = ko.observable(data.ciocia);\r\n\t\tself.ciocia2 = ko.observable(data.ciocia2);\r\n\t\tself.ciocia3 = ko.observable(data.ciocia3);\r\n\t\tself.ciocia4 = ko.observable(data.ciocia4);\r\n\t\tself.dt1 = ko.observable(data.dt1);\r\n\t\tself.dt2 = ko.observable(data.dt2);\r\n\t\tself.dt3 = ko.observable(data.dt3);\r\n\t\tself.g = ko.observable(data.g);\r\n\t\tself.intNullable1 = ko.observable(data.intNullable1);\r\n\t\tself.intNullable2 = ko.observable(data.intNullable2);\r\n\t\tself.intNullable3 = ko.observable(data.intNullable3);\r\n\t\tself.jola = ko.observable(data.jola);\r\n\t\tself.someVal = ko.observable(data.someVal);\r\n\t\tself.table1 = ko.observableArray(data.table1);\r\n\t\tself.table2 = ko.observableArray(data.table2);\r\n\t\tself.table3 = ko.observableArray(data.table3);\r\n\t\tself.table4 = ko.observableArray(data.table4);\r\n\t} else {\r\n\t\tself.ciocia = ko.observable(0);\r\n\t\tself.ciocia2 = ko.observable();\r\n\t\tself.ciocia3 = ko.observable(0);\r\n\t\tself.ciocia4 = ko.observable(0);\r\n\t\tself.dt1 = ko.observable(0001-01-01 00:00:00);\r\n\t\tself.dt2 = ko.observable();\r\n\t\tself.dt3 = ko.observable(00:00:00);\r\n\t\tself.g = ko.observable(00000000-0000-0000-0000-000000000000);\r\n\t\tself.intNullable1 = ko.observable();\r\n\t\tself.intNullable2 = ko.observable();\r\n\t\tself.intNullable3 = ko.observable();\r\n\t\tself.jola = ko.observable();\r\n\t\tself.someVal = ko.observable(Ola);\r\n\t\tself.table1 = ko.observableArray([]);\r\n\t\tself.table2 = ko.observableArray([]);\r\n\t\tself.table3 = ko.observableArray([]);\r\n\t\tself.table4 = ko.observableArray([]);\r\n\t}\r\n\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 19:23:18.1445|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "Success": true,
  "Message": "var MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.ciocia = ko.observable(data.ciocia);\r\n\t\tself.ciocia2 = ko.observable(data.ciocia2);\r\n\t\tself.ciocia3 = ko.observable(data.ciocia3);\r\n\t\tself.ciocia4 = ko.observable(data.ciocia4);\r\n\t\tself.dt1 = ko.observable(data.dt1);\r\n\t\tself.dt2 = ko.observable(data.dt2);\r\n\t\tself.dt3 = ko.observable(data.dt3);\r\n\t\tself.g = ko.observable(data.g);\r\n\t\tself.intNullable1 = ko.observable(data.intNullable1);\r\n\t\tself.intNullable2 = ko.observable(data.intNullable2);\r\n\t\tself.intNullable3 = ko.observable(data.intNullable3);\r\n\t\tself.jola = ko.observable(data.jola);\r\n\t\tself.someVal = ko.observable(data.someVal);\r\n\t\tself.table1 = ko.observableArray(data.table1);\r\n\t\tself.table2 = ko.observableArray(data.table2);\r\n\t\tself.table3 = ko.observableArray(data.table3);\r\n\t\tself.table4 = ko.observableArray(data.table4);\r\n\t} else {\r\n\t\tself.ciocia = ko.observable(0);\r\n\t\tself.ciocia2 = ko.observable();\r\n\t\tself.ciocia3 = ko.observable(0);\r\n\t\tself.ciocia4 = ko.observable(0);\r\n\t\tself.dt1 = ko.observable(0001-01-01 00:00:00);\r\n\t\tself.dt2 = ko.observable();\r\n\t\tself.dt3 = ko.observable(00:00:00);\r\n\t\tself.g = ko.observable(00000000-0000-0000-0000-000000000000);\r\n\t\tself.intNullable1 = ko.observable();\r\n\t\tself.intNullable2 = ko.observable();\r\n\t\tself.intNullable3 = ko.observable();\r\n\t\tself.jola = ko.observable();\r\n\t\tself.someVal = ko.observable(Ola);\r\n\t\tself.table1 = ko.observableArray([]);\r\n\t\tself.table2 = ko.observableArray([]);\r\n\t\tself.table3 = ko.observableArray([]);\r\n\t\tself.table4 = ko.observableArray([]);\r\n\t}\r\n\r\n};\r\n\r\nvar Tesssttttt = {\r\n\tmaja: 'Maja',\r\n\tola: 'Ola'\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 19:26:55.2869|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:26:55.3059|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": true,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": true,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": true
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:27:25.8856|DEBUG|CSharp2Knockout.Controllers.HomeController|Handling exception on Controller 
2012-07-17 19:27:25.8856|ERROR|CSharp2Knockout.Controllers.HomeController|Error occured on controller, handling it as AjaxResult System.ArgumentException: Unsupported type: System.Int32[]. Use the JsonSerializer class to get the object's JSON representation.
   at Newtonsoft.Json.JsonConvert.ToString(Object value)
   at CSharp2Knockout.Services.KnockoutWritter.WritePropertyDefaultValue(SemanticElement semanticElement, JObject obj, Int32 identLevel) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\KnockoutWritter.cs:line 149
   at CSharp2Knockout.Services.KnockoutWritter.WritePropertyDeclarationComplex(TypeResult type) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\KnockoutWritter.cs:line 195
   at CSharp2Knockout.Services.KnockoutWritter.WriteClassDeclaration(TypeResult type) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\KnockoutWritter.cs:line 101
   at CSharp2Knockout.Services.KnockoutWritter.Write(VisitorResult result, TranslateOptions options) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\KnockoutWritter.cs:line 58
   at CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion.ToKnockoutVm(String code, TranslateOptions options) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 70
   at CSharp2Knockout.Controllers.HomeController.Index(String csharp, TranslateOptions options) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Controllers\HomeController.cs:line 29
   at lambda_method(Closure , ControllerBase , Object[] )
   at System.Web.Mvc.ActionMethodDispatcher.Execute(ControllerBase controller, Object[] parameters)
   at System.Web.Mvc.ReflectedActionDescriptor.Execute(ControllerContext controllerContext, IDictionary`2 parameters)
   at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary`2 parameters)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41()
   at System.Web.Mvc.Async.AsyncResultWrapper.<>c__DisplayClass8`1.<BeginSynchronous>b__7(IAsyncResult _)
   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<BeginInvokeActionMethodWithFilters>b__36(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethodWithFilters(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<>c__DisplayClass2a.<BeginInvokeAction>b__20()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<BeginInvokeAction>b__22(IAsyncResult asyncResult)
2012-07-17 19:28:41.5370|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:28:41.5540|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": true,
  "SortProps": true,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:29:17.3480|DEBUG|CSharp2Knockout.Controllers.HomeController|Handling exception on Controller 
2012-07-17 19:29:17.3480|ERROR|CSharp2Knockout.Controllers.HomeController|Error occured on controller, handling it as AjaxResult System.ArgumentException: Unsupported type: System.Int32[]. Use the JsonSerializer class to get the object's JSON representation.
   at Newtonsoft.Json.JsonConvert.ToString(Object value)
   at CSharp2Knockout.Services.KnockoutWritter.WritePropertyDefaultValue(SemanticElement semanticElement, JObject obj, Int32 identLevel) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\KnockoutWritter.cs:line 149
   at CSharp2Knockout.Services.KnockoutWritter.WritePropertyDeclarationComplex(TypeResult type) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\KnockoutWritter.cs:line 195
   at CSharp2Knockout.Services.KnockoutWritter.WriteClassDeclaration(TypeResult type) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\KnockoutWritter.cs:line 101
   at CSharp2Knockout.Services.KnockoutWritter.Write(VisitorResult result, TranslateOptions options) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\KnockoutWritter.cs:line 58
   at CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion.ToKnockoutVm(String code, TranslateOptions options) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 70
   at CSharp2Knockout.Controllers.HomeController.Index(String csharp, TranslateOptions options) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Controllers\HomeController.cs:line 29
   at lambda_method(Closure , ControllerBase , Object[] )
   at System.Web.Mvc.ActionMethodDispatcher.Execute(ControllerBase controller, Object[] parameters)
   at System.Web.Mvc.ReflectedActionDescriptor.Execute(ControllerContext controllerContext, IDictionary`2 parameters)
   at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary`2 parameters)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41()
   at System.Web.Mvc.Async.AsyncResultWrapper.<>c__DisplayClass8`1.<BeginSynchronous>b__7(IAsyncResult _)
   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<BeginInvokeActionMethodWithFilters>b__36(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethodWithFilters(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<>c__DisplayClass2a.<BeginInvokeAction>b__20()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<BeginInvokeAction>b__22(IAsyncResult asyncResult)
2012-07-17 19:31:09.9375|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:31:09.9585|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": false,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:31:10.5515|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": true,
  "Message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.dt1 = ko.observable(data.Dt1);\r\n\tself.dt2 = ko.observable(data.Dt2);\r\n\tself.dt3 = ko.observable(data.Dt3);\r\n\tself.g = ko.observable(data.G);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\tself.someVal = ko.observable(data.SomeVal);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observableArray(data.Table1);\r\n\tself.table2 = ko.observableArray(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observableArray(data.Table4);\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 19:31:10.5515|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "Success": true,
  "Message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n\tself.jola = ko.observable(data.Jola);\r\n\tself.dt1 = ko.observable(data.Dt1);\r\n\tself.dt2 = ko.observable(data.Dt2);\r\n\tself.dt3 = ko.observable(data.Dt3);\r\n\tself.g = ko.observable(data.G);\r\n\tself.ciocia = ko.observable(data.Ciocia);\r\n\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\tself.someVal = ko.observable(data.SomeVal);\r\n\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\tself.table1 = ko.observableArray(data.Table1);\r\n\tself.table2 = ko.observableArray(data.Table2);\r\n\tself.table3 = ko.observableArray(data.Table3);\r\n\tself.table4 = ko.observableArray(data.Table4);\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (!data) {\r\n\t\tdata = { };\r\n\t}\r\n\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 19:31:20.3561|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": true,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:31:20.3561|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": true,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:32:26.6798|DEBUG|CSharp2Knockout.Controllers.HomeController|Handling exception on Controller 
2012-07-17 19:32:26.7038|ERROR|CSharp2Knockout.Controllers.HomeController|Error occured on controller, handling it as AjaxResult System.ArgumentException: Unsupported type: System.Int32[]. Use the JsonSerializer class to get the object's JSON representation.
   at Newtonsoft.Json.JsonConvert.ToString(Object value)
   at CSharp2Knockout.Services.KnockoutWritter.WritePropertyDefaultValue(SemanticElement semanticElement, Int32 identLevel) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\KnockoutWritter.cs:line 149
   at CSharp2Knockout.Services.KnockoutWritter.WritePropertyDeclarationComplex(TypeResult type) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\KnockoutWritter.cs:line 197
   at CSharp2Knockout.Services.KnockoutWritter.WriteClassDeclaration(TypeResult type) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\KnockoutWritter.cs:line 101
   at CSharp2Knockout.Services.KnockoutWritter.Write(VisitorResult result, TranslateOptions options) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\KnockoutWritter.cs:line 58
   at CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion.ToKnockoutVm(String code, TranslateOptions options) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Services\NRefactory\NRefactoryCodeConvertion.cs:line 70
   at CSharp2Knockout.Controllers.HomeController.Index(String csharp, TranslateOptions options) in D:\Projects\Gutek\CSharp2Knockout\src\CSharp2Knockout\Controllers\HomeController.cs:line 29
   at lambda_method(Closure , ControllerBase , Object[] )
   at System.Web.Mvc.ActionMethodDispatcher.Execute(ControllerBase controller, Object[] parameters)
   at System.Web.Mvc.ReflectedActionDescriptor.Execute(ControllerContext controllerContext, IDictionary`2 parameters)
   at System.Web.Mvc.ControllerActionInvoker.InvokeActionMethod(ControllerContext controllerContext, ActionDescriptor actionDescriptor, IDictionary`2 parameters)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass42.<BeginInvokeSynchronousActionMethod>b__41()
   at System.Web.Mvc.Async.AsyncResultWrapper.<>c__DisplayClass8`1.<BeginSynchronous>b__7(IAsyncResult _)
   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethod(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<>c__DisplayClass39.<BeginInvokeActionMethodWithFilters>b__33()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass4f.<InvokeActionMethodFilterAsynchronously>b__49()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass37.<BeginInvokeActionMethodWithFilters>b__36(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncResultWrapper.WrappedAsyncResult`1.End()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.EndInvokeActionMethodWithFilters(IAsyncResult asyncResult)
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<>c__DisplayClass2a.<BeginInvokeAction>b__20()
   at System.Web.Mvc.Async.AsyncControllerActionInvoker.<>c__DisplayClass25.<BeginInvokeAction>b__22(IAsyncResult asyncResult)
2012-07-17 19:34:08.9667|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": true,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:34:08.9847|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": true,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:35:20.7768|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": true,
  "Message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.jola = ko.observable(data.Jola);\r\n\t\tself.dt1 = ko.observable(data.Dt1);\r\n\t\tself.dt2 = ko.observable(data.Dt2);\r\n\t\tself.dt3 = ko.observable(data.Dt3);\r\n\t\tself.g = ko.observable(data.G);\r\n\t\tself.ciocia = ko.observable(data.Ciocia);\r\n\t\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\t\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\t\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\t\tself.someVal = ko.observable(data.SomeVal);\r\n\t\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\t\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\t\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\t\tself.table1 = ko.observableArray(data.Table1);\r\n\t\tself.table2 = ko.observableArray(data.Table2);\r\n\t\tself.table3 = ko.observableArray(data.Table3);\r\n\t\tself.table4 = ko.observableArray(data.Table4);\r\n\t} else {\r\n\t\tself.jola = ko.observable('null');\r\n\t\tself.dt1 = ko.observable('\"0001-01-01T00:00:00\"');\r\n\t\tself.dt2 = ko.observable('null');\r\n\t\tself.dt3 = ko.observable('\"00:00:00\"');\r\n\t\tself.g = ko.observable('\"00000000-0000-0000-0000-000000000000\"');\r\n\t\tself.ciocia = ko.observable('0');\r\n\t\tself.ciocia2 = ko.observable('null');\r\n\t\tself.ciocia3 = ko.observable('0.0');\r\n\t\tself.ciocia4 = ko.observable('0.0');\r\n\t\tself.someVal = ko.observable('\"Ola\"');\r\n\t\tself.intNullable1 = ko.observable('null');\r\n\t\tself.intNullable2 = ko.observable('null');\r\n\t\tself.intNullable3 = ko.observable('null');\r\n\t\tself.table1 = ko.observableArray([]);\r\n\t\tself.table2 = ko.observableArray([]);\r\n\t\tself.table3 = ko.observableArray([]);\r\n\t\tself.table4 = ko.observableArray([]);\r\n\t}\r\n\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 19:35:20.7768|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "Success": true,
  "Message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.jola = ko.observable(data.Jola);\r\n\t\tself.dt1 = ko.observable(data.Dt1);\r\n\t\tself.dt2 = ko.observable(data.Dt2);\r\n\t\tself.dt3 = ko.observable(data.Dt3);\r\n\t\tself.g = ko.observable(data.G);\r\n\t\tself.ciocia = ko.observable(data.Ciocia);\r\n\t\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\t\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\t\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\t\tself.someVal = ko.observable(data.SomeVal);\r\n\t\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\t\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\t\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\t\tself.table1 = ko.observableArray(data.Table1);\r\n\t\tself.table2 = ko.observableArray(data.Table2);\r\n\t\tself.table3 = ko.observableArray(data.Table3);\r\n\t\tself.table4 = ko.observableArray(data.Table4);\r\n\t} else {\r\n\t\tself.jola = ko.observable('null');\r\n\t\tself.dt1 = ko.observable('\"0001-01-01T00:00:00\"');\r\n\t\tself.dt2 = ko.observable('null');\r\n\t\tself.dt3 = ko.observable('\"00:00:00\"');\r\n\t\tself.g = ko.observable('\"00000000-0000-0000-0000-000000000000\"');\r\n\t\tself.ciocia = ko.observable('0');\r\n\t\tself.ciocia2 = ko.observable('null');\r\n\t\tself.ciocia3 = ko.observable('0.0');\r\n\t\tself.ciocia4 = ko.observable('0.0');\r\n\t\tself.someVal = ko.observable('\"Ola\"');\r\n\t\tself.intNullable1 = ko.observable('null');\r\n\t\tself.intNullable2 = ko.observable('null');\r\n\t\tself.intNullable3 = ko.observable('null');\r\n\t\tself.table1 = ko.observableArray([]);\r\n\t\tself.table2 = ko.observableArray([]);\r\n\t\tself.table3 = ko.observableArray([]);\r\n\t\tself.table4 = ko.observableArray([]);\r\n\t}\r\n\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 19:36:21.2243|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": true,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:36:21.2323|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": true,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 19:36:21.8583|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": true,
  "Message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.jola = ko.observable(data.Jola);\r\n\t\tself.dt1 = ko.observable(data.Dt1);\r\n\t\tself.dt2 = ko.observable(data.Dt2);\r\n\t\tself.dt3 = ko.observable(data.Dt3);\r\n\t\tself.g = ko.observable(data.G);\r\n\t\tself.ciocia = ko.observable(data.Ciocia);\r\n\t\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\t\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\t\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\t\tself.someVal = ko.observable(data.SomeVal);\r\n\t\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\t\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\t\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\t\tself.table1 = ko.observableArray(data.Table1);\r\n\t\tself.table2 = ko.observableArray(data.Table2);\r\n\t\tself.table3 = ko.observableArray(data.Table3);\r\n\t\tself.table4 = ko.observableArray(data.Table4);\r\n\t} else {\r\n\t\tself.jola = ko.observable(null);\r\n\t\tself.dt1 = ko.observable(\"0001-01-01T00:00:00\");\r\n\t\tself.dt2 = ko.observable(null);\r\n\t\tself.dt3 = ko.observable(\"00:00:00\");\r\n\t\tself.g = ko.observable(\"00000000-0000-0000-0000-000000000000\");\r\n\t\tself.ciocia = ko.observable(0);\r\n\t\tself.ciocia2 = ko.observable(null);\r\n\t\tself.ciocia3 = ko.observable(0.0);\r\n\t\tself.ciocia4 = ko.observable(0.0);\r\n\t\tself.someVal = ko.observable(\"Ola\");\r\n\t\tself.intNullable1 = ko.observable(null);\r\n\t\tself.intNullable2 = ko.observable(null);\r\n\t\tself.intNullable3 = ko.observable(null);\r\n\t\tself.table1 = ko.observableArray([]);\r\n\t\tself.table2 = ko.observableArray([]);\r\n\t\tself.table3 = ko.observableArray([]);\r\n\t\tself.table4 = ko.observableArray([]);\r\n\t}\r\n\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 19:36:21.8583|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "Success": true,
  "Message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.jola = ko.observable(data.Jola);\r\n\t\tself.dt1 = ko.observable(data.Dt1);\r\n\t\tself.dt2 = ko.observable(data.Dt2);\r\n\t\tself.dt3 = ko.observable(data.Dt3);\r\n\t\tself.g = ko.observable(data.G);\r\n\t\tself.ciocia = ko.observable(data.Ciocia);\r\n\t\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\t\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\t\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\t\tself.someVal = ko.observable(data.SomeVal);\r\n\t\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\t\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\t\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\t\tself.table1 = ko.observableArray(data.Table1);\r\n\t\tself.table2 = ko.observableArray(data.Table2);\r\n\t\tself.table3 = ko.observableArray(data.Table3);\r\n\t\tself.table4 = ko.observableArray(data.Table4);\r\n\t} else {\r\n\t\tself.jola = ko.observable(null);\r\n\t\tself.dt1 = ko.observable(\"0001-01-01T00:00:00\");\r\n\t\tself.dt2 = ko.observable(null);\r\n\t\tself.dt3 = ko.observable(\"00:00:00\");\r\n\t\tself.g = ko.observable(\"00000000-0000-0000-0000-000000000000\");\r\n\t\tself.ciocia = ko.observable(0);\r\n\t\tself.ciocia2 = ko.observable(null);\r\n\t\tself.ciocia3 = ko.observable(0.0);\r\n\t\tself.ciocia4 = ko.observable(0.0);\r\n\t\tself.someVal = ko.observable(\"Ola\");\r\n\t\tself.intNullable1 = ko.observable(null);\r\n\t\tself.intNullable2 = ko.observable(null);\r\n\t\tself.intNullable3 = ko.observable(null);\r\n\t\tself.table1 = ko.observableArray([]);\r\n\t\tself.table2 = ko.observableArray([]);\r\n\t\tself.table3 = ko.observableArray([]);\r\n\t\tself.table4 = ko.observableArray([]);\r\n\t}\r\n\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 21:27:15.8869|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": true,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 21:27:15.9049|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": true,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
public partial class Tesss {

    public string Jola {get;set;}


    public DateTime Dt1 {get;set;}
    public DateTime? Dt2 {get;set;}
    public TimeSpan Dt3 {get;set;}

    public Guid G {get;set;}

    public int Ciocia {get;set;}
    public flout Ciocia2 {get;set;}
    public decimal Ciocia3 {get;set;}
    public double Ciocia4 {get;set;}

    public Tesssttttt SomeVal {get;set;}

    public int? IntNullable1 {get;set;}
    public Nullable<int> IntNullable2 {get;set;}
    public System.Nullable<int> IntNullable3 {get;set;}

    public int[] Table1 {get;set;}
    public string[] Table2 {get;set;}
    public IList<string> Table3 {get;set;}
    public MyCollection Table4 {get;set;}
}

public class MyCollection: IList<int> {}
public enum Tesssttttt {
    Ola = 10,
    Maja = 12
} 
2012-07-17 21:32:58.4005|DEBUG|CSharp2Knockout.Services.NRefactory.NRefactoryCodeConvertion|Returning Convertion Result: {
  "Success": true,
  "Message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.jola = ko.observable(data.Jola);\r\n\t\tself.dt1 = ko.observable(data.Dt1);\r\n\t\tself.dt2 = ko.observable(data.Dt2);\r\n\t\tself.dt3 = ko.observable(data.Dt3);\r\n\t\tself.g = ko.observable(data.G);\r\n\t\tself.ciocia = ko.observable(data.Ciocia);\r\n\t\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\t\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\t\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\t\tself.someVal = ko.observable(data.SomeVal);\r\n\t\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\t\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\t\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\t\tself.table1 = ko.observableArray(data.Table1);\r\n\t\tself.table2 = ko.observableArray(data.Table2);\r\n\t\tself.table3 = ko.observableArray(data.Table3);\r\n\t\tself.table4 = ko.observableArray(data.Table4);\r\n\t} else {\r\n\t\tself.jola = ko.observable(null);\r\n\t\tself.dt1 = ko.observable(\"0001-01-01T00:00:00\");\r\n\t\tself.dt2 = ko.observable(null);\r\n\t\tself.dt3 = ko.observable(\"00:00:00\");\r\n\t\tself.g = ko.observable(\"00000000-0000-0000-0000-000000000000\");\r\n\t\tself.ciocia = ko.observable(0);\r\n\t\tself.ciocia2 = ko.observable(null);\r\n\t\tself.ciocia3 = ko.observable(0.0);\r\n\t\tself.ciocia4 = ko.observable(0.0);\r\n\t\tself.someVal = ko.observable(\"Ola\");\r\n\t\tself.intNullable1 = ko.observable(null);\r\n\t\tself.intNullable2 = ko.observable(null);\r\n\t\tself.intNullable3 = ko.observable(null);\r\n\t\tself.table1 = ko.observableArray([]);\r\n\t\tself.table2 = ko.observableArray([]);\r\n\t\tself.table3 = ko.observableArray([]);\r\n\t\tself.table4 = ko.observableArray([]);\r\n\t}\r\n\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 21:32:58.4015|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "Success": true,
  "Message": "var Tesss = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.jola = ko.observable(data.Jola);\r\n\t\tself.dt1 = ko.observable(data.Dt1);\r\n\t\tself.dt2 = ko.observable(data.Dt2);\r\n\t\tself.dt3 = ko.observable(data.Dt3);\r\n\t\tself.g = ko.observable(data.G);\r\n\t\tself.ciocia = ko.observable(data.Ciocia);\r\n\t\tself.ciocia2 = ko.observable(data.Ciocia2);\r\n\t\tself.ciocia3 = ko.observable(data.Ciocia3);\r\n\t\tself.ciocia4 = ko.observable(data.Ciocia4);\r\n\t\tself.someVal = ko.observable(data.SomeVal);\r\n\t\tself.intNullable1 = ko.observable(data.IntNullable1);\r\n\t\tself.intNullable2 = ko.observable(data.IntNullable2);\r\n\t\tself.intNullable3 = ko.observable(data.IntNullable3);\r\n\t\tself.table1 = ko.observableArray(data.Table1);\r\n\t\tself.table2 = ko.observableArray(data.Table2);\r\n\t\tself.table3 = ko.observableArray(data.Table3);\r\n\t\tself.table4 = ko.observableArray(data.Table4);\r\n\t} else {\r\n\t\tself.jola = ko.observable(null);\r\n\t\tself.dt1 = ko.observable(\"0001-01-01T00:00:00\");\r\n\t\tself.dt2 = ko.observable(null);\r\n\t\tself.dt3 = ko.observable(\"00:00:00\");\r\n\t\tself.g = ko.observable(\"00000000-0000-0000-0000-000000000000\");\r\n\t\tself.ciocia = ko.observable(0);\r\n\t\tself.ciocia2 = ko.observable(null);\r\n\t\tself.ciocia3 = ko.observable(0.0);\r\n\t\tself.ciocia4 = ko.observable(0.0);\r\n\t\tself.someVal = ko.observable(\"Ola\");\r\n\t\tself.intNullable1 = ko.observable(null);\r\n\t\tself.intNullable2 = ko.observable(null);\r\n\t\tself.intNullable3 = ko.observable(null);\r\n\t\tself.table1 = ko.observableArray([]);\r\n\t\tself.table2 = ko.observableArray([]);\r\n\t\tself.table3 = ko.observableArray([]);\r\n\t\tself.table4 = ko.observableArray([]);\r\n\t}\r\n\r\n};\r\n\r\nvar MyCollection = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 21:46:48.1619|DEBUG|CSharp2Knockout.Controllers.HomeController|Starting converting class with options: {
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": true,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}, class to convert:
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web.Mvc;
using LemaServices.Common.Data;

namespace Epa.LicGen.UI.Web.Models
{
    public static class LicenceInputExtensions
    {
        public static IList<EmissionPointDropdown> GetEmissionPoints(this LicenceInput @this)
        {
            var results = new List<EmissionPointDropdown>();

            var primary = @this.PrimaryDischarge.Items.Select(x => new EmissionPointDropdown { EdenCode = x.EdenCode, Name = x.EdenCode, Id = x.Id, LicenceCode = x.LicenceCode });
            var secondary = @this.SecondaryDischarge.Items.SelectMany(x => x.Items.Select(y => new EmissionPointDropdown { EdenCode = y.EdenCode, Name = y.EdenCode, Id = y.Id, LicenceCode = y.LicenceCode }));
            var swo = @this.StorWaterOverflow.Items.Select(x => new EmissionPointDropdown { EdenCode = x.EdenCode, Name = x.EdenCode, Id = x.Id, LicenceCode = x.LicenceCode });

            results.AddRange(primary);
            results.AddRange(secondary);
            results.AddRange(swo);

            return results.OrderBy(x => x.EdenCode).ToList();
        }
    }

    public class EmissionPointDropdown
    {
        public Guid Id { get; set; }
        public string EdenCode { get; set; }
        public string Name { get; set; }
        public string LicenceCode { get; set; }
    }

    public class LicenceInput
    {
        public int Version { get; set; }
        public bool IsDraft { get; set; }
        public string BeingEditedBy { get; set; }
        public LicenceType Type { get; set; }
        public Guid LicenceId { get; set; }
        public string RegNo { get; set; }
        public string Agglomeration { get; set; }
        public int? AgglomerationPeId { get; set; }
        public string AgglomerationPe { get; set; }
        public string Licensee { get; set; }
        public string OclrInspector { get; set; }
        public string OclrTeamAdmin { get; set; }
        public IEnumerable<string> OclrAdministrators { get; set; }

        public IntroductionInput Introduction { get; set; }
        public GlossaryInput Glossary { get; set; }
        public DecisionInput Decision { get; set; }
        public ScheduleDischargesInput ScheduleDischarges { get; set; }
        public EnvironmentalReportInput EnvironmentalReport { get; set; }
        public ImprovementInput Improvement { get; set; }

        public Condition1Input Condition1 { get; set; }
        public Condition2Input Condition2 { get; set; }
        public Condition3Input Condition3 { get; set; }
        public Condition4Input Condition4 { get; set; }
        public Condition5Input Condition5 { get; set; }
        public Condition6Input Condition6 { get; set; }
        public Condition7Input Condition7 { get; set; }

        public DisconinuedInput Discontinued { get; set; }

        public PrimaryDischargeInput PrimaryDischarge { get; set; }
        public SecondaryDischargeInput SecondaryDischarge { get; set; }
        public StormWaterOverflowInput StorWaterOverflow { get; set; }

        public GroundwaterMonitoringInput GroundwaterMonitoring { get; set; }
        public ReceivingWaterMonitoringInput ReceivingWaterMonitoring { get; set; }

        public AdditionalInformationInput AdditionalInformation { get; set; }

        public LicenceInput()
        {
            Introduction = new IntroductionInput();
            PrimaryDischarge = new PrimaryDischargeInput();
            SecondaryDischarge = new SecondaryDischargeInput();
            GroundwaterMonitoring = new GroundwaterMonitoringInput();
            ReceivingWaterMonitoring = new ReceivingWaterMonitoringInput();
            StorWaterOverflow = new StormWaterOverflowInput();
            Glossary = new GlossaryInput();
            Decision = new DecisionInput();
            Improvement = new ImprovementInput();
            Discontinued = new DisconinuedInput();
            ScheduleDischarges = new ScheduleDischargesInput();
            EnvironmentalReport = new EnvironmentalReportInput();
            AdditionalInformation = new AdditionalInformationInput();

            Condition1 = new Condition1Input();
            Condition2 = new Condition2Input();
            Condition3 = new Condition3Input();
            Condition4 = new Condition4Input();
            Condition5 = new Condition5Input();
            Condition6 = new Condition6Input();
            Condition7 = new Condition7Input();
        }
    }

    public class Condition1Input
    {
        public string Help { get; set; }
        public string Reason { get; set; }
        public IEnumerable<ConditionItem> Conditions { get; set; }

        public int Order { get { return 1; } }

        public Condition1Input()
        {
            Conditions = new List<ConditionItem>();
        }
    }
    public class Condition2Input
    {
        public string Help { get; set; }
        public string Reason { get; set; }
        public IEnumerable<ConditionItem> Conditions { get; set; }

        public int Order { get { return 2; } }

        public Condition2Input()
        {
            Conditions = new List<ConditionItem>();
        }
    }
    public class Condition3Input
    {
        public string Help { get; set; }
        public string Reason { get; set; }
        public IEnumerable<ConditionItem> Conditions { get; set; }

        public int Order { get { return 3; } }

        public Condition3Input()
        {
            Conditions = new List<ConditionItem>();
        }
    }
    public class Condition4Input
    {
        public string Help { get; set; }
        public string Reason { get; set; }
        public IEnumerable<ConditionItem> Conditions { get; set; }

        public int Order { get { return 4; } }

        public Condition4Input()
        {
            Conditions = new List<ConditionItem>();
        }
    }
    public class Condition5Input
    {
        public string Help { get; set; }
        public string Reason { get; set; }
        public IEnumerable<ConditionItem> Conditions { get; set; }

        public int Order { get { return 5; } }

        public Condition5Input()
        {
            Conditions = new List<ConditionItem>();
        }
    }
    public class Condition6Input
    {
        public string Help { get; set; }
        public string Reason { get; set; }
        public IEnumerable<ConditionItem> Conditions { get; set; }

        public int Order { get { return 6; } }

        public Condition6Input()
        {
            Conditions = new List<ConditionItem>();
        }
    }
    public class Condition7Input
    {
        public string Help { get; set; }
        public string Reason { get; set; }
        public IEnumerable<ConditionItem> Conditions { get; set; }

        public int Order { get { return 7; } }

        public Condition7Input()
        {
            Conditions = new List<ConditionItem>();
        }
    }

    public class AdditionalInformationInput
    {
        public string Help { get; set; }
        public string Label { get; set; }
        public string Person { get; set; }
    }

    public class GroundwaterMonitoringInput
    {
        public string Help { get; set; }
        public IEnumerable<GroundWater> Items { get; set; }

        public GroundwaterMonitoringInput()
        {
            Items = new List<GroundWater>();
        }

        public class GroundWater
        {
            public IEnumerable<GroundWaterItem> Items { get; set; }
            public IEnumerable<MonitoringParameter> Parameters { get; set; }

            public GroundWater()
            {
                Parameters = new List<MonitoringParameter>();
                Items = new List<GroundWaterItem>();
            }
        }

        public class GroundWaterItem
        {
            public Guid Id { get; set; }
            public string EdenCode { get; set; }
            public string LicenceCode { get; set; }

            public string Northing { get; set; }
            public string Easting { get; set; }

            public string WaterName { get; set; }
            public string WfdCode { get; set; }
        }

        public class MonitoringParameter
        {
            public int Id { get; set; }
            public string Unit { get; set; }
            public int UnitId { get; set; }

            public string Name { get; set; }

            public int? AnalysisMethod { get; set; }

            public int? MonitoringFreqency { get; set; }
        }
    }

    public class ReceivingWaterMonitoringInput
    {
        public string Help { get; set; }
        public IEnumerable<ReceivingWater> Items { get; set; }
        public ReceivingWaterMonitoringInput()
        {
            Items = new List<ReceivingWater>();
        }

        public class ReceivingWater
        {
            public IEnumerable<ReceivingWaterItem> Items { get; set; }
            public IEnumerable<MonitoringParameter> Parameters { get; set; }

            public ReceivingWater()
            {
                Parameters = new List<MonitoringParameter>();
                Items = new List<ReceivingWaterItem>();
            }
        }

        public class ReceivingWaterItem
        {
            public Guid Id { get; set; }
            public string EdenCode { get; set; }
            public string LicenceCode { get; set; }

            public string Northing { get; set; }
            public string Easting { get; set; }

            public string WaterName { get; set; }
            public string WfdCode { get; set; }
        }

        public class MonitoringParameter
        {
            public int Id { get; set; }
            public string Unit { get; set; }
            public int UnitId { get; set; }

            public string Name { get; set; }

            public int? AnalysisMethod { get; set; }

            public int? MonitoringFreqency { get; set; }
        }
    }

    public class PrimaryDischargeInput
    {
        public IEnumerable<PrimiaryDischargeItem> Items { get; set; }

        public string Help { get; set; }

        public class PrimiaryDischargeItem
        {
            public Guid Id { get; set; }
            public string EdenCode { get; set; }
            public string LicenceCode { get; set; }
            public string DischargeNorthing { get; set; }
            public string DischargeEasting { get; set; }

            public string MonitoringNorthing { get; set; }
            public string MonitoringEasting { get; set; }

            public string WaterName { get; set; }
            public string WfdCode { get; set; }
            public DateTime? CompositeSampling { get; set; }

            public bool? ElvBased { get; set; }

            public IEnumerable<ElvParamterItem> Elvs { get; set; }

            public PrimiaryDischargeItem()
            {
                Elvs = new List<ElvParamterItem>();
            }
        }

        public PrimaryDischargeInput()
        {
            Items = new List<PrimiaryDischargeItem>();
        }

        public class ElvParamterItem
        {
            public int Id { get; set; }
            public string Unit { get; set; }
            public int UnitId { get; set; }

            public string Name { get; set; }

            public DateTime? CommencementDate { get; set; }
            public int? AnalysisMethod { get; set; }
            public int? SamplingMethod { get; set; }

            public int? MonitoringFreqency { get; set; }

            public decimal? MaxAllowableDiscreteExcess { get; set; }

            public decimal? MaxAllowableCompositeExcess { get; set; }

            public string Value { get; set; }
            public string InterimValue { get; set; }
        }
    }
    public class SecondaryDischargeInput
    {
        public string Help { get; set; }
        public IEnumerable<SecondaryDischarge> Items { get; set; }

        public class SecondaryDischarge
        {
            public IEnumerable<SecondaryDischargeItem> Items { get; set; }
            public IEnumerable<ElvParamterItem> Elvs { get; set; }
            public bool? ElvBased { get; set; }
            private Guid _id;
            public Guid Id
            {
                get
                {
                    if(_id == Guid.Empty)
                    {
                        _id = Guid.NewGuid();
                    }
                    return _id;
                }
            }

            public SecondaryDischarge()
            {
                Elvs = new List<ElvParamterItem>();
                Items = new List<SecondaryDischargeItem>();
            }
        }

        public class SecondaryDischargeItem
        {
            public Guid Id { get; set; }

            public string EdenCode { get; set; }
            public string LicenceCode { get; set; }

            public string DischargeNorthing { get; set; }
            public string DischargeEasting { get; set; }

            public string MonitoringNorthing { get; set; }
            public string MonitoringEasting { get; set; }

            public string WaterName { get; set; }
            public string WfdCode { get; set; }

            public DateTime? CompositeSampling { get; set; }
        }

        public SecondaryDischargeInput()
        {
            Items = new List<SecondaryDischarge>();
        }

        public class ElvParamterItem
        {
            public int Id { get; set; }
            public string Unit { get; set; }
            public int UnitId { get; set; }

            public string Name { get; set; }

            public DateTime? CommencementDate { get; set; }
            public int? AnalysisMethod { get; set; }

            public int? SamplingMethod { get; set; }

            public int? MonitoringFreqency { get; set; }

            public decimal? MaxAllowableDiscreteExcess { get; set; }

            public decimal? MaxAllowableCompositeExcess { get; set; }

            public string Value { get; set; }
            public string InterimValue { get; set; }
        }
    }

    public class StormWaterOverflowInput
    {
        public string Help { get; set; }
        public IEnumerable<StormWaterOverflowItem> Items { get; set; }

        public class StormWaterOverflowItem
        {
            public Guid Id { get; set; }
            public string EdenCode { get; set; }
            public string LicenceCode { get; set; }

            public string Northing { get; set; }
            public string Easting { get; set; }

            public string WaterName { get; set; }
            public string WfdCode { get; set; }
        }

        public StormWaterOverflowInput()
        {
            Items = new List<StormWaterOverflowItem>();
        }
    }

    public class DisconinuedInput
    {
        public string Help { get; set; }
        public IEnumerable<DiscontinuedItem> Discontinuations { get; set; }

        public class DiscontinuedItem
        {
            public string EdenCode { get; set; }
            public string LicenceCode { get; set; }
            public int? Type { get; set; }
            public int? Action { get; set; }
            public DateTime? ActionDate { get; set; }
            public string RelatedCondition { get; set; }
        }

        public DisconinuedInput()
        {
            Discontinuations = new List<DiscontinuedItem>();
        }
    }

    public class ImprovementInput
    {
        public string Help { get; set; }
        public IEnumerable<ImprovementItem> Improvements { get; set; }

        public class ImprovementItem
        {
            public string Location { get; set; }
            public int? Type { get; set; }
            public string Improvement { get; set; }
            public int? SourceOfFounding { get; set; }
            public string RelatedCondition { get; set; }
            public DateTime? CompletionDate { get; set; }
        }

        public ImprovementInput()
        {
            Improvements = new List<ImprovementItem>();
        }
    }

    public class EnvironmentalReportInput
    {
        public string Help { get; set; }
        [DataType(DataType.MultilineText)]
        [AllowHtml]
        public string EnvironmentalReport { get; set; }
    }

    public class ScheduleDischargesInput
    {
        public string Help { get; set; }
        [DataType(DataType.MultilineText)]
        [AllowHtml]
        public string LegislationStatement { get; set; }
        public string DischargePeDetails { get; set; }
    }

    public class GlossaryInput
    {
        public string Help { get; set; }
        public IEnumerable<GlossaryItem> Glossary { get; set; }

        public class GlossaryItem
        {
            public string Term { get; set; }
            [DataType(DataType.MultilineText)]
            [AllowHtml]
            public string Definition { get; set; }
        }

        public GlossaryInput()
        {
            Glossary = new List<GlossaryItem>();
        }
    }

    public class IntroductionInput
    {
        public string Help { get; set; }
        [DisplayName("Introduction")]
        [DataType(DataType.MultilineText)]
        [AllowHtml]
        public string Introduction { get; set; }
    }

    public class DecisionInput
    {
        public string Help { get; set; }
        [DisplayName("Decision & reasons for Decision")]
        [DataType(DataType.MultilineText)]
        [AllowHtml]
        public string Decision { get; set; }
    }
} 
2012-07-17 21:46:48.1709|DEBUG|CSharp2Knockout.Controllers.HomeController|Converting code to Knockout VM. Options:
{
  "PublicOnly": true,
  "PublicGetter": true,
  "IncludeEnums": false,
  "IncludeDefaultData": true,
  "SortProps": false,
  "CamelCase": true,
  "ForceCamelCase": false,
  "UseCamelCaseForKo": true,
  "UseCamelCaseForAll": false
}
Code:
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Web.Mvc;
using LemaServices.Common.Data;

namespace Epa.LicGen.UI.Web.Models
{
    public static class LicenceInputExtensions
    {
        public static IList<EmissionPointDropdown> GetEmissionPoints(this LicenceInput @this)
        {
            var results = new List<EmissionPointDropdown>();

            var primary = @this.PrimaryDischarge.Items.Select(x => new EmissionPointDropdown { EdenCode = x.EdenCode, Name = x.EdenCode, Id = x.Id, LicenceCode = x.LicenceCode });
            var secondary = @this.SecondaryDischarge.Items.SelectMany(x => x.Items.Select(y => new EmissionPointDropdown { EdenCode = y.EdenCode, Name = y.EdenCode, Id = y.Id, LicenceCode = y.LicenceCode }));
            var swo = @this.StorWaterOverflow.Items.Select(x => new EmissionPointDropdown { EdenCode = x.EdenCode, Name = x.EdenCode, Id = x.Id, LicenceCode = x.LicenceCode });

            results.AddRange(primary);
            results.AddRange(secondary);
            results.AddRange(swo);

            return results.OrderBy(x => x.EdenCode).ToList();
        }
    }

    public class EmissionPointDropdown
    {
        public Guid Id { get; set; }
        public string EdenCode { get; set; }
        public string Name { get; set; }
        public string LicenceCode { get; set; }
    }

    public class LicenceInput
    {
        public int Version { get; set; }
        public bool IsDraft { get; set; }
        public string BeingEditedBy { get; set; }
        public LicenceType Type { get; set; }
        public Guid LicenceId { get; set; }
        public string RegNo { get; set; }
        public string Agglomeration { get; set; }
        public int? AgglomerationPeId { get; set; }
        public string AgglomerationPe { get; set; }
        public string Licensee { get; set; }
        public string OclrInspector { get; set; }
        public string OclrTeamAdmin { get; set; }
        public IEnumerable<string> OclrAdministrators { get; set; }

        public IntroductionInput Introduction { get; set; }
        public GlossaryInput Glossary { get; set; }
        public DecisionInput Decision { get; set; }
        public ScheduleDischargesInput ScheduleDischarges { get; set; }
        public EnvironmentalReportInput EnvironmentalReport { get; set; }
        public ImprovementInput Improvement { get; set; }

        public Condition1Input Condition1 { get; set; }
        public Condition2Input Condition2 { get; set; }
        public Condition3Input Condition3 { get; set; }
        public Condition4Input Condition4 { get; set; }
        public Condition5Input Condition5 { get; set; }
        public Condition6Input Condition6 { get; set; }
        public Condition7Input Condition7 { get; set; }

        public DisconinuedInput Discontinued { get; set; }

        public PrimaryDischargeInput PrimaryDischarge { get; set; }
        public SecondaryDischargeInput SecondaryDischarge { get; set; }
        public StormWaterOverflowInput StorWaterOverflow { get; set; }

        public GroundwaterMonitoringInput GroundwaterMonitoring { get; set; }
        public ReceivingWaterMonitoringInput ReceivingWaterMonitoring { get; set; }

        public AdditionalInformationInput AdditionalInformation { get; set; }

        public LicenceInput()
        {
            Introduction = new IntroductionInput();
            PrimaryDischarge = new PrimaryDischargeInput();
            SecondaryDischarge = new SecondaryDischargeInput();
            GroundwaterMonitoring = new GroundwaterMonitoringInput();
            ReceivingWaterMonitoring = new ReceivingWaterMonitoringInput();
            StorWaterOverflow = new StormWaterOverflowInput();
            Glossary = new GlossaryInput();
            Decision = new DecisionInput();
            Improvement = new ImprovementInput();
            Discontinued = new DisconinuedInput();
            ScheduleDischarges = new ScheduleDischargesInput();
            EnvironmentalReport = new EnvironmentalReportInput();
            AdditionalInformation = new AdditionalInformationInput();

            Condition1 = new Condition1Input();
            Condition2 = new Condition2Input();
            Condition3 = new Condition3Input();
            Condition4 = new Condition4Input();
            Condition5 = new Condition5Input();
            Condition6 = new Condition6Input();
            Condition7 = new Condition7Input();
        }
    }

    public class Condition1Input
    {
        public string Help { get; set; }
        public string Reason { get; set; }
        public IEnumerable<ConditionItem> Conditions { get; set; }

        public int Order { get { return 1; } }

        public Condition1Input()
        {
            Conditions = new List<ConditionItem>();
        }
    }
    public class Condition2Input
    {
        public string Help { get; set; }
        public string Reason { get; set; }
        public IEnumerable<ConditionItem> Conditions { get; set; }

        public int Order { get { return 2; } }

        public Condition2Input()
        {
            Conditions = new List<ConditionItem>();
        }
    }
    public class Condition3Input
    {
        public string Help { get; set; }
        public string Reason { get; set; }
        public IEnumerable<ConditionItem> Conditions { get; set; }

        public int Order { get { return 3; } }

        public Condition3Input()
        {
            Conditions = new List<ConditionItem>();
        }
    }
    public class Condition4Input
    {
        public string Help { get; set; }
        public string Reason { get; set; }
        public IEnumerable<ConditionItem> Conditions { get; set; }

        public int Order { get { return 4; } }

        public Condition4Input()
        {
            Conditions = new List<ConditionItem>();
        }
    }
    public class Condition5Input
    {
        public string Help { get; set; }
        public string Reason { get; set; }
        public IEnumerable<ConditionItem> Conditions { get; set; }

        public int Order { get { return 5; } }

        public Condition5Input()
        {
            Conditions = new List<ConditionItem>();
        }
    }
    public class Condition6Input
    {
        public string Help { get; set; }
        public string Reason { get; set; }
        public IEnumerable<ConditionItem> Conditions { get; set; }

        public int Order { get { return 6; } }

        public Condition6Input()
        {
            Conditions = new List<ConditionItem>();
        }
    }
    public class Condition7Input
    {
        public string Help { get; set; }
        public string Reason { get; set; }
        public IEnumerable<ConditionItem> Conditions { get; set; }

        public int Order { get { return 7; } }

        public Condition7Input()
        {
            Conditions = new List<ConditionItem>();
        }
    }

    public class AdditionalInformationInput
    {
        public string Help { get; set; }
        public string Label { get; set; }
        public string Person { get; set; }
    }

    public class GroundwaterMonitoringInput
    {
        public string Help { get; set; }
        public IEnumerable<GroundWater> Items { get; set; }

        public GroundwaterMonitoringInput()
        {
            Items = new List<GroundWater>();
        }

        public class GroundWater
        {
            public IEnumerable<GroundWaterItem> Items { get; set; }
            public IEnumerable<MonitoringParameter> Parameters { get; set; }

            public GroundWater()
            {
                Parameters = new List<MonitoringParameter>();
                Items = new List<GroundWaterItem>();
            }
        }

        public class GroundWaterItem
        {
            public Guid Id { get; set; }
            public string EdenCode { get; set; }
            public string LicenceCode { get; set; }

            public string Northing { get; set; }
            public string Easting { get; set; }

            public string WaterName { get; set; }
            public string WfdCode { get; set; }
        }

        public class MonitoringParameter
        {
            public int Id { get; set; }
            public string Unit { get; set; }
            public int UnitId { get; set; }

            public string Name { get; set; }

            public int? AnalysisMethod { get; set; }

            public int? MonitoringFreqency { get; set; }
        }
    }

    public class ReceivingWaterMonitoringInput
    {
        public string Help { get; set; }
        public IEnumerable<ReceivingWater> Items { get; set; }
        public ReceivingWaterMonitoringInput()
        {
            Items = new List<ReceivingWater>();
        }

        public class ReceivingWater
        {
            public IEnumerable<ReceivingWaterItem> Items { get; set; }
            public IEnumerable<MonitoringParameter> Parameters { get; set; }

            public ReceivingWater()
            {
                Parameters = new List<MonitoringParameter>();
                Items = new List<ReceivingWaterItem>();
            }
        }

        public class ReceivingWaterItem
        {
            public Guid Id { get; set; }
            public string EdenCode { get; set; }
            public string LicenceCode { get; set; }

            public string Northing { get; set; }
            public string Easting { get; set; }

            public string WaterName { get; set; }
            public string WfdCode { get; set; }
        }

        public class MonitoringParameter
        {
            public int Id { get; set; }
            public string Unit { get; set; }
            public int UnitId { get; set; }

            public string Name { get; set; }

            public int? AnalysisMethod { get; set; }

            public int? MonitoringFreqency { get; set; }
        }
    }

    public class PrimaryDischargeInput
    {
        public IEnumerable<PrimiaryDischargeItem> Items { get; set; }

        public string Help { get; set; }

        public class PrimiaryDischargeItem
        {
            public Guid Id { get; set; }
            public string EdenCode { get; set; }
            public string LicenceCode { get; set; }
            public string DischargeNorthing { get; set; }
            public string DischargeEasting { get; set; }

            public string MonitoringNorthing { get; set; }
            public string MonitoringEasting { get; set; }

            public string WaterName { get; set; }
            public string WfdCode { get; set; }
            public DateTime? CompositeSampling { get; set; }

            public bool? ElvBased { get; set; }

            public IEnumerable<ElvParamterItem> Elvs { get; set; }

            public PrimiaryDischargeItem()
            {
                Elvs = new List<ElvParamterItem>();
            }
        }

        public PrimaryDischargeInput()
        {
            Items = new List<PrimiaryDischargeItem>();
        }

        public class ElvParamterItem
        {
            public int Id { get; set; }
            public string Unit { get; set; }
            public int UnitId { get; set; }

            public string Name { get; set; }

            public DateTime? CommencementDate { get; set; }
            public int? AnalysisMethod { get; set; }
            public int? SamplingMethod { get; set; }

            public int? MonitoringFreqency { get; set; }

            public decimal? MaxAllowableDiscreteExcess { get; set; }

            public decimal? MaxAllowableCompositeExcess { get; set; }

            public string Value { get; set; }
            public string InterimValue { get; set; }
        }
    }
    public class SecondaryDischargeInput
    {
        public string Help { get; set; }
        public IEnumerable<SecondaryDischarge> Items { get; set; }

        public class SecondaryDischarge
        {
            public IEnumerable<SecondaryDischargeItem> Items { get; set; }
            public IEnumerable<ElvParamterItem> Elvs { get; set; }
            public bool? ElvBased { get; set; }
            private Guid _id;
            public Guid Id
            {
                get
                {
                    if(_id == Guid.Empty)
                    {
                        _id = Guid.NewGuid();
                    }
                    return _id;
                }
            }

            public SecondaryDischarge()
            {
                Elvs = new List<ElvParamterItem>();
                Items = new List<SecondaryDischargeItem>();
            }
        }

        public class SecondaryDischargeItem
        {
            public Guid Id { get; set; }

            public string EdenCode { get; set; }
            public string LicenceCode { get; set; }

            public string DischargeNorthing { get; set; }
            public string DischargeEasting { get; set; }

            public string MonitoringNorthing { get; set; }
            public string MonitoringEasting { get; set; }

            public string WaterName { get; set; }
            public string WfdCode { get; set; }

            public DateTime? CompositeSampling { get; set; }
        }

        public SecondaryDischargeInput()
        {
            Items = new List<SecondaryDischarge>();
        }

        public class ElvParamterItem
        {
            public int Id { get; set; }
            public string Unit { get; set; }
            public int UnitId { get; set; }

            public string Name { get; set; }

            public DateTime? CommencementDate { get; set; }
            public int? AnalysisMethod { get; set; }

            public int? SamplingMethod { get; set; }

            public int? MonitoringFreqency { get; set; }

            public decimal? MaxAllowableDiscreteExcess { get; set; }

            public decimal? MaxAllowableCompositeExcess { get; set; }

            public string Value { get; set; }
            public string InterimValue { get; set; }
        }
    }

    public class StormWaterOverflowInput
    {
        public string Help { get; set; }
        public IEnumerable<StormWaterOverflowItem> Items { get; set; }

        public class StormWaterOverflowItem
        {
            public Guid Id { get; set; }
            public string EdenCode { get; set; }
            public string LicenceCode { get; set; }

            public string Northing { get; set; }
            public string Easting { get; set; }

            public string WaterName { get; set; }
            public string WfdCode { get; set; }
        }

        public StormWaterOverflowInput()
        {
            Items = new List<StormWaterOverflowItem>();
        }
    }

    public class DisconinuedInput
    {
        public string Help { get; set; }
        public IEnumerable<DiscontinuedItem> Discontinuations { get; set; }

        public class DiscontinuedItem
        {
            public string EdenCode { get; set; }
            public string LicenceCode { get; set; }
            public int? Type { get; set; }
            public int? Action { get; set; }
            public DateTime? ActionDate { get; set; }
            public string RelatedCondition { get; set; }
        }

        public DisconinuedInput()
        {
            Discontinuations = new List<DiscontinuedItem>();
        }
    }

    public class ImprovementInput
    {
        public string Help { get; set; }
        public IEnumerable<ImprovementItem> Improvements { get; set; }

        public class ImprovementItem
        {
            public string Location { get; set; }
            public int? Type { get; set; }
            public string Improvement { get; set; }
            public int? SourceOfFounding { get; set; }
            public string RelatedCondition { get; set; }
            public DateTime? CompletionDate { get; set; }
        }

        public ImprovementInput()
        {
            Improvements = new List<ImprovementItem>();
        }
    }

    public class EnvironmentalReportInput
    {
        public string Help { get; set; }
        [DataType(DataType.MultilineText)]
        [AllowHtml]
        public string EnvironmentalReport { get; set; }
    }

    public class ScheduleDischargesInput
    {
        public string Help { get; set; }
        [DataType(DataType.MultilineText)]
        [AllowHtml]
        public string LegislationStatement { get; set; }
        public string DischargePeDetails { get; set; }
    }

    public class GlossaryInput
    {
        public string Help { get; set; }
        public IEnumerable<GlossaryItem> Glossary { get; set; }

        public class GlossaryItem
        {
            public string Term { get; set; }
            [DataType(DataType.MultilineText)]
            [AllowHtml]
            public string Definition { get; set; }
        }

        public GlossaryInput()
        {
            Glossary = new List<GlossaryItem>();
        }
    }

    public class IntroductionInput
    {
        public string Help { get; set; }
        [DisplayName("Introduction")]
        [DataType(DataType.MultilineText)]
        [AllowHtml]
        public string Introduction { get; set; }
    }

    public class DecisionInput
    {
        public string Help { get; set; }
        [DisplayName("Decision & reasons for Decision")]
        [DataType(DataType.MultilineText)]
        [AllowHtml]
        public string Decision { get; set; }
    }
} 
2012-07-17 21:46:48.9090|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning Convertion Result: {
  "Success": true,
  "Message": "var LicenceInputExtensions = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar EmissionPointDropdown = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.id = ko.observable(data.Id);\r\n\t\tself.edenCode = ko.observable(data.EdenCode);\r\n\t\tself.name = ko.observable(data.Name);\r\n\t\tself.licenceCode = ko.observable(data.LicenceCode);\r\n\t} else {\r\n\t\tself.id = ko.observable(\"00000000-0000-0000-0000-000000000000\");\r\n\t\tself.edenCode = ko.observable(null);\r\n\t\tself.name = ko.observable(null);\r\n\t\tself.licenceCode = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar LicenceInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.version = ko.observable(data.Version);\r\n\t\tself.isDraft = ko.observable(data.IsDraft);\r\n\t\tself.beingEditedBy = ko.observable(data.BeingEditedBy);\r\n\t\tself.type = ko.observable(data.Type);\r\n\t\tself.licenceId = ko.observable(data.LicenceId);\r\n\t\tself.regNo = ko.observable(data.RegNo);\r\n\t\tself.agglomeration = ko.observable(data.Agglomeration);\r\n\t\tself.agglomerationPeId = ko.observable(data.AgglomerationPeId);\r\n\t\tself.agglomerationPe = ko.observable(data.AgglomerationPe);\r\n\t\tself.licensee = ko.observable(data.Licensee);\r\n\t\tself.oclrInspector = ko.observable(data.OclrInspector);\r\n\t\tself.oclrTeamAdmin = ko.observable(data.OclrTeamAdmin);\r\n\t\tself.oclrAdministrators = ko.observable(data.OclrAdministrators);\r\n\t\tself.introduction = ko.observable(data.Introduction);\r\n\t\tself.glossary = ko.observable(data.Glossary);\r\n\t\tself.decision = ko.observable(data.Decision);\r\n\t\tself.scheduleDischarges = ko.observable(data.ScheduleDischarges);\r\n\t\tself.environmentalReport = ko.observable(data.EnvironmentalReport);\r\n\t\tself.improvement = ko.observable(data.Improvement);\r\n\t\tself.condition1 = ko.observable(data.Condition1);\r\n\t\tself.condition2 = ko.observable(data.Condition2);\r\n\t\tself.condition3 = ko.observable(data.Condition3);\r\n\t\tself.condition4 = ko.observable(data.Condition4);\r\n\t\tself.condition5 = ko.observable(data.Condition5);\r\n\t\tself.condition6 = ko.observable(data.Condition6);\r\n\t\tself.condition7 = ko.observable(data.Condition7);\r\n\t\tself.discontinued = ko.observable(data.Discontinued);\r\n\t\tself.primaryDischarge = ko.observable(data.PrimaryDischarge);\r\n\t\tself.secondaryDischarge = ko.observable(data.SecondaryDischarge);\r\n\t\tself.storWaterOverflow = ko.observable(data.StorWaterOverflow);\r\n\t\tself.groundwaterMonitoring = ko.observable(data.GroundwaterMonitoring);\r\n\t\tself.receivingWaterMonitoring = ko.observable(data.ReceivingWaterMonitoring);\r\n\t\tself.additionalInformation = ko.observable(data.AdditionalInformation);\r\n\t} else {\r\n\t\tself.version = ko.observable(0);\r\n\t\tself.isDraft = ko.observable(false);\r\n\t\tself.beingEditedBy = ko.observable(null);\r\n\t\tself.type = ko.observable(null);\r\n\t\tself.licenceId = ko.observable(\"00000000-0000-0000-0000-000000000000\");\r\n\t\tself.regNo = ko.observable(null);\r\n\t\tself.agglomeration = ko.observable(null);\r\n\t\tself.agglomerationPeId = ko.observable(null);\r\n\t\tself.agglomerationPe = ko.observable(null);\r\n\t\tself.licensee = ko.observable(null);\r\n\t\tself.oclrInspector = ko.observable(null);\r\n\t\tself.oclrTeamAdmin = ko.observable(null);\r\n\t\tself.oclrAdministrators = ko.observable(null);\r\n\t\tself.introduction = ko.observable(null);\r\n\t\tself.glossary = ko.observable(null);\r\n\t\tself.decision = ko.observable(null);\r\n\t\tself.scheduleDischarges = ko.observable(null);\r\n\t\tself.environmentalReport = ko.observable(null);\r\n\t\tself.improvement = ko.observable(null);\r\n\t\tself.condition1 = ko.observable(null);\r\n\t\tself.condition2 = ko.observable(null);\r\n\t\tself.condition3 = ko.observable(null);\r\n\t\tself.condition4 = ko.observable(null);\r\n\t\tself.condition5 = ko.observable(null);\r\n\t\tself.condition6 = ko.observable(null);\r\n\t\tself.condition7 = ko.observable(null);\r\n\t\tself.discontinued = ko.observable(null);\r\n\t\tself.primaryDischarge = ko.observable(null);\r\n\t\tself.secondaryDischarge = ko.observable(null);\r\n\t\tself.storWaterOverflow = ko.observable(null);\r\n\t\tself.groundwaterMonitoring = ko.observable(null);\r\n\t\tself.receivingWaterMonitoring = ko.observable(null);\r\n\t\tself.additionalInformation = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar Condition1Input = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.reason = ko.observable(data.Reason);\r\n\t\tself.conditions = ko.observable(data.Conditions);\r\n\t\tself.order = ko.observable(data.Order);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.reason = ko.observable(null);\r\n\t\tself.conditions = ko.observable(null);\r\n\t\tself.order = ko.observable(0);\r\n\t}\r\n\r\n};\r\n\r\nvar Condition2Input = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.reason = ko.observable(data.Reason);\r\n\t\tself.conditions = ko.observable(data.Conditions);\r\n\t\tself.order = ko.observable(data.Order);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.reason = ko.observable(null);\r\n\t\tself.conditions = ko.observable(null);\r\n\t\tself.order = ko.observable(0);\r\n\t}\r\n\r\n};\r\n\r\nvar Condition3Input = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.reason = ko.observable(data.Reason);\r\n\t\tself.conditions = ko.observable(data.Conditions);\r\n\t\tself.order = ko.observable(data.Order);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.reason = ko.observable(null);\r\n\t\tself.conditions = ko.observable(null);\r\n\t\tself.order = ko.observable(0);\r\n\t}\r\n\r\n};\r\n\r\nvar Condition4Input = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.reason = ko.observable(data.Reason);\r\n\t\tself.conditions = ko.observable(data.Conditions);\r\n\t\tself.order = ko.observable(data.Order);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.reason = ko.observable(null);\r\n\t\tself.conditions = ko.observable(null);\r\n\t\tself.order = ko.observable(0);\r\n\t}\r\n\r\n};\r\n\r\nvar Condition5Input = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.reason = ko.observable(data.Reason);\r\n\t\tself.conditions = ko.observable(data.Conditions);\r\n\t\tself.order = ko.observable(data.Order);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.reason = ko.observable(null);\r\n\t\tself.conditions = ko.observable(null);\r\n\t\tself.order = ko.observable(0);\r\n\t}\r\n\r\n};\r\n\r\nvar Condition6Input = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.reason = ko.observable(data.Reason);\r\n\t\tself.conditions = ko.observable(data.Conditions);\r\n\t\tself.order = ko.observable(data.Order);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.reason = ko.observable(null);\r\n\t\tself.conditions = ko.observable(null);\r\n\t\tself.order = ko.observable(0);\r\n\t}\r\n\r\n};\r\n\r\nvar Condition7Input = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.reason = ko.observable(data.Reason);\r\n\t\tself.conditions = ko.observable(data.Conditions);\r\n\t\tself.order = ko.observable(data.Order);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.reason = ko.observable(null);\r\n\t\tself.conditions = ko.observable(null);\r\n\t\tself.order = ko.observable(0);\r\n\t}\r\n\r\n};\r\n\r\nvar AdditionalInformationInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.label = ko.observable(data.Label);\r\n\t\tself.person = ko.observable(data.Person);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.label = ko.observable(null);\r\n\t\tself.person = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar GroundwaterMonitoringInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.items = ko.observable(data.Items);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.items = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar GroundWater = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.items = ko.observable(data.Items);\r\n\t\tself.parameters = ko.observable(data.Parameters);\r\n\t} else {\r\n\t\tself.items = ko.observable(null);\r\n\t\tself.parameters = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar GroundWaterItem = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.id = ko.observable(data.Id);\r\n\t\tself.edenCode = ko.observable(data.EdenCode);\r\n\t\tself.licenceCode = ko.observable(data.LicenceCode);\r\n\t\tself.northing = ko.observable(data.Northing);\r\n\t\tself.easting = ko.observable(data.Easting);\r\n\t\tself.waterName = ko.observable(data.WaterName);\r\n\t\tself.wfdCode = ko.observable(data.WfdCode);\r\n\t} else {\r\n\t\tself.id = ko.observable(\"00000000-0000-0000-0000-000000000000\");\r\n\t\tself.edenCode = ko.observable(null);\r\n\t\tself.licenceCode = ko.observable(null);\r\n\t\tself.northing = ko.observable(null);\r\n\t\tself.easting = ko.observable(null);\r\n\t\tself.waterName = ko.observable(null);\r\n\t\tself.wfdCode = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar MonitoringParameter = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.id = ko.observable(data.Id);\r\n\t\tself.unit = ko.observable(data.Unit);\r\n\t\tself.unitId = ko.observable(data.UnitId);\r\n\t\tself.name = ko.observable(data.Name);\r\n\t\tself.analysisMethod = ko.observable(data.AnalysisMethod);\r\n\t\tself.monitoringFreqency = ko.observable(data.MonitoringFreqency);\r\n\t} else {\r\n\t\tself.id = ko.observable(0);\r\n\t\tself.unit = ko.observable(null);\r\n\t\tself.unitId = ko.observable(0);\r\n\t\tself.name = ko.observable(null);\r\n\t\tself.analysisMethod = ko.observable(null);\r\n\t\tself.monitoringFreqency = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar ReceivingWaterMonitoringInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.items = ko.observable(data.Items);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.items = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar ReceivingWater = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.items = ko.observable(data.Items);\r\n\t\tself.parameters = ko.observable(data.Parameters);\r\n\t} else {\r\n\t\tself.items = ko.observable(null);\r\n\t\tself.parameters = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar ReceivingWaterItem = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.id = ko.observable(data.Id);\r\n\t\tself.edenCode = ko.observable(data.EdenCode);\r\n\t\tself.licenceCode = ko.observable(data.LicenceCode);\r\n\t\tself.northing = ko.observable(data.Northing);\r\n\t\tself.easting = ko.observable(data.Easting);\r\n\t\tself.waterName = ko.observable(data.WaterName);\r\n\t\tself.wfdCode = ko.observable(data.WfdCode);\r\n\t} else {\r\n\t\tself.id = ko.observable(\"00000000-0000-0000-0000-000000000000\");\r\n\t\tself.edenCode = ko.observable(null);\r\n\t\tself.licenceCode = ko.observable(null);\r\n\t\tself.northing = ko.observable(null);\r\n\t\tself.easting = ko.observable(null);\r\n\t\tself.waterName = ko.observable(null);\r\n\t\tself.wfdCode = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar PrimaryDischargeInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.items = ko.observable(data.Items);\r\n\t\tself.help = ko.observable(data.Help);\r\n\t} else {\r\n\t\tself.items = ko.observable(null);\r\n\t\tself.help = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar PrimiaryDischargeItem = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.id = ko.observable(data.Id);\r\n\t\tself.edenCode = ko.observable(data.EdenCode);\r\n\t\tself.licenceCode = ko.observable(data.LicenceCode);\r\n\t\tself.dischargeNorthing = ko.observable(data.DischargeNorthing);\r\n\t\tself.dischargeEasting = ko.observable(data.DischargeEasting);\r\n\t\tself.monitoringNorthing = ko.observable(data.MonitoringNorthing);\r\n\t\tself.monitoringEasting = ko.observable(data.MonitoringEasting);\r\n\t\tself.waterName = ko.observable(data.WaterName);\r\n\t\tself.wfdCode = ko.observable(data.WfdCode);\r\n\t\tself.compositeSampling = ko.observable(data.CompositeSampling);\r\n\t\tself.elvBased = ko.observable(data.ElvBased);\r\n\t\tself.elvs = ko.observable(data.Elvs);\r\n\t} else {\r\n\t\tself.id = ko.observable(\"00000000-0000-0000-0000-000000000000\");\r\n\t\tself.edenCode = ko.observable(null);\r\n\t\tself.licenceCode = ko.observable(null);\r\n\t\tself.dischargeNorthing = ko.observable(null);\r\n\t\tself.dischargeEasting = ko.observable(null);\r\n\t\tself.monitoringNorthing = ko.observable(null);\r\n\t\tself.monitoringEasting = ko.observable(null);\r\n\t\tself.waterName = ko.observable(null);\r\n\t\tself.wfdCode = ko.observable(null);\r\n\t\tself.compositeSampling = ko.observable(null);\r\n\t\tself.elvBased = ko.observable(null);\r\n\t\tself.elvs = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar ElvParamterItem = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.id = ko.observable(data.Id);\r\n\t\tself.unit = ko.observable(data.Unit);\r\n\t\tself.unitId = ko.observable(data.UnitId);\r\n\t\tself.name = ko.observable(data.Name);\r\n\t\tself.commencementDate = ko.observable(data.CommencementDate);\r\n\t\tself.analysisMethod = ko.observable(data.AnalysisMethod);\r\n\t\tself.samplingMethod = ko.observable(data.SamplingMethod);\r\n\t\tself.monitoringFreqency = ko.observable(data.MonitoringFreqency);\r\n\t\tself.maxAllowableDiscreteExcess = ko.observable(data.MaxAllowableDiscreteExcess);\r\n\t\tself.maxAllowableCompositeExcess = ko.observable(data.MaxAllowableCompositeExcess);\r\n\t\tself.value = ko.observable(data.Value);\r\n\t\tself.interimValue = ko.observable(data.InterimValue);\r\n\t} else {\r\n\t\tself.id = ko.observable(0);\r\n\t\tself.unit = ko.observable(null);\r\n\t\tself.unitId = ko.observable(0);\r\n\t\tself.name = ko.observable(null);\r\n\t\tself.commencementDate = ko.observable(null);\r\n\t\tself.analysisMethod = ko.observable(null);\r\n\t\tself.samplingMethod = ko.observable(null);\r\n\t\tself.monitoringFreqency = ko.observable(null);\r\n\t\tself.maxAllowableDiscreteExcess = ko.observable(null);\r\n\t\tself.maxAllowableCompositeExcess = ko.observable(null);\r\n\t\tself.value = ko.observable(null);\r\n\t\tself.interimValue = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar SecondaryDischargeInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.items = ko.observable(data.Items);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.items = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar SecondaryDischarge = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.items = ko.observable(data.Items);\r\n\t\tself.elvs = ko.observable(data.Elvs);\r\n\t\tself.elvBased = ko.observable(data.ElvBased);\r\n\t\tself.id = ko.observable(data.Id);\r\n\t} else {\r\n\t\tself.items = ko.observable(null);\r\n\t\tself.elvs = ko.observable(null);\r\n\t\tself.elvBased = ko.observable(null);\r\n\t\tself.id = ko.observable(\"00000000-0000-0000-0000-000000000000\");\r\n\t}\r\n\r\n};\r\n\r\nvar SecondaryDischargeItem = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.id = ko.observable(data.Id);\r\n\t\tself.edenCode = ko.observable(data.EdenCode);\r\n\t\tself.licenceCode = ko.observable(data.LicenceCode);\r\n\t\tself.dischargeNorthing = ko.observable(data.DischargeNorthing);\r\n\t\tself.dischargeEasting = ko.observable(data.DischargeEasting);\r\n\t\tself.monitoringNorthing = ko.observable(data.MonitoringNorthing);\r\n\t\tself.monitoringEasting = ko.observable(data.MonitoringEasting);\r\n\t\tself.waterName = ko.observable(data.WaterName);\r\n\t\tself.wfdCode = ko.observable(data.WfdCode);\r\n\t\tself.compositeSampling = ko.observable(data.CompositeSampling);\r\n\t} else {\r\n\t\tself.id = ko.observable(\"00000000-0000-0000-0000-000000000000\");\r\n\t\tself.edenCode = ko.observable(null);\r\n\t\tself.licenceCode = ko.observable(null);\r\n\t\tself.dischargeNorthing = ko.observable(null);\r\n\t\tself.dischargeEasting = ko.observable(null);\r\n\t\tself.monitoringNorthing = ko.observable(null);\r\n\t\tself.monitoringEasting = ko.observable(null);\r\n\t\tself.waterName = ko.observable(null);\r\n\t\tself.wfdCode = ko.observable(null);\r\n\t\tself.compositeSampling = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar StormWaterOverflowInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.items = ko.observable(data.Items);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.items = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar StormWaterOverflowItem = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.id = ko.observable(data.Id);\r\n\t\tself.edenCode = ko.observable(data.EdenCode);\r\n\t\tself.licenceCode = ko.observable(data.LicenceCode);\r\n\t\tself.northing = ko.observable(data.Northing);\r\n\t\tself.easting = ko.observable(data.Easting);\r\n\t\tself.waterName = ko.observable(data.WaterName);\r\n\t\tself.wfdCode = ko.observable(data.WfdCode);\r\n\t} else {\r\n\t\tself.id = ko.observable(\"00000000-0000-0000-0000-000000000000\");\r\n\t\tself.edenCode = ko.observable(null);\r\n\t\tself.licenceCode = ko.observable(null);\r\n\t\tself.northing = ko.observable(null);\r\n\t\tself.easting = ko.observable(null);\r\n\t\tself.waterName = ko.observable(null);\r\n\t\tself.wfdCode = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar DisconinuedInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.discontinuations = ko.observable(data.Discontinuations);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.discontinuations = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar DiscontinuedItem = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.edenCode = ko.observable(data.EdenCode);\r\n\t\tself.licenceCode = ko.observable(data.LicenceCode);\r\n\t\tself.type = ko.observable(data.Type);\r\n\t\tself.action = ko.observable(data.Action);\r\n\t\tself.actionDate = ko.observable(data.ActionDate);\r\n\t\tself.relatedCondition = ko.observable(data.RelatedCondition);\r\n\t} else {\r\n\t\tself.edenCode = ko.observable(null);\r\n\t\tself.licenceCode = ko.observable(null);\r\n\t\tself.type = ko.observable(null);\r\n\t\tself.action = ko.observable(null);\r\n\t\tself.actionDate = ko.observable(null);\r\n\t\tself.relatedCondition = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar ImprovementInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.improvements = ko.observable(data.Improvements);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.improvements = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar ImprovementItem = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.location = ko.observable(data.Location);\r\n\t\tself.type = ko.observable(data.Type);\r\n\t\tself.improvement = ko.observable(data.Improvement);\r\n\t\tself.sourceOfFounding = ko.observable(data.SourceOfFounding);\r\n\t\tself.relatedCondition = ko.observable(data.RelatedCondition);\r\n\t\tself.completionDate = ko.observable(data.CompletionDate);\r\n\t} else {\r\n\t\tself.location = ko.observable(null);\r\n\t\tself.type = ko.observable(null);\r\n\t\tself.improvement = ko.observable(null);\r\n\t\tself.sourceOfFounding = ko.observable(null);\r\n\t\tself.relatedCondition = ko.observable(null);\r\n\t\tself.completionDate = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar EnvironmentalReportInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.environmentalReport = ko.observable(data.EnvironmentalReport);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.environmentalReport = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar ScheduleDischargesInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.legislationStatement = ko.observable(data.LegislationStatement);\r\n\t\tself.dischargePeDetails = ko.observable(data.DischargePeDetails);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.legislationStatement = ko.observable(null);\r\n\t\tself.dischargePeDetails = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar GlossaryInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.glossary = ko.observable(data.Glossary);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.glossary = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar GlossaryItem = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.term = ko.observable(data.Term);\r\n\t\tself.definition = ko.observable(data.Definition);\r\n\t} else {\r\n\t\tself.term = ko.observable(null);\r\n\t\tself.definition = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar IntroductionInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.introduction = ko.observable(data.Introduction);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.introduction = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar DecisionInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.decision = ko.observable(data.Decision);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.decision = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
2012-07-17 21:46:48.9090|DEBUG|CSharp2Knockout.Controllers.HomeController|Returning converted class:
{
  "Success": true,
  "Message": "var LicenceInputExtensions = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t} else {\r\n\t}\r\n\r\n};\r\n\r\nvar EmissionPointDropdown = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.id = ko.observable(data.Id);\r\n\t\tself.edenCode = ko.observable(data.EdenCode);\r\n\t\tself.name = ko.observable(data.Name);\r\n\t\tself.licenceCode = ko.observable(data.LicenceCode);\r\n\t} else {\r\n\t\tself.id = ko.observable(\"00000000-0000-0000-0000-000000000000\");\r\n\t\tself.edenCode = ko.observable(null);\r\n\t\tself.name = ko.observable(null);\r\n\t\tself.licenceCode = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar LicenceInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.version = ko.observable(data.Version);\r\n\t\tself.isDraft = ko.observable(data.IsDraft);\r\n\t\tself.beingEditedBy = ko.observable(data.BeingEditedBy);\r\n\t\tself.type = ko.observable(data.Type);\r\n\t\tself.licenceId = ko.observable(data.LicenceId);\r\n\t\tself.regNo = ko.observable(data.RegNo);\r\n\t\tself.agglomeration = ko.observable(data.Agglomeration);\r\n\t\tself.agglomerationPeId = ko.observable(data.AgglomerationPeId);\r\n\t\tself.agglomerationPe = ko.observable(data.AgglomerationPe);\r\n\t\tself.licensee = ko.observable(data.Licensee);\r\n\t\tself.oclrInspector = ko.observable(data.OclrInspector);\r\n\t\tself.oclrTeamAdmin = ko.observable(data.OclrTeamAdmin);\r\n\t\tself.oclrAdministrators = ko.observable(data.OclrAdministrators);\r\n\t\tself.introduction = ko.observable(data.Introduction);\r\n\t\tself.glossary = ko.observable(data.Glossary);\r\n\t\tself.decision = ko.observable(data.Decision);\r\n\t\tself.scheduleDischarges = ko.observable(data.ScheduleDischarges);\r\n\t\tself.environmentalReport = ko.observable(data.EnvironmentalReport);\r\n\t\tself.improvement = ko.observable(data.Improvement);\r\n\t\tself.condition1 = ko.observable(data.Condition1);\r\n\t\tself.condition2 = ko.observable(data.Condition2);\r\n\t\tself.condition3 = ko.observable(data.Condition3);\r\n\t\tself.condition4 = ko.observable(data.Condition4);\r\n\t\tself.condition5 = ko.observable(data.Condition5);\r\n\t\tself.condition6 = ko.observable(data.Condition6);\r\n\t\tself.condition7 = ko.observable(data.Condition7);\r\n\t\tself.discontinued = ko.observable(data.Discontinued);\r\n\t\tself.primaryDischarge = ko.observable(data.PrimaryDischarge);\r\n\t\tself.secondaryDischarge = ko.observable(data.SecondaryDischarge);\r\n\t\tself.storWaterOverflow = ko.observable(data.StorWaterOverflow);\r\n\t\tself.groundwaterMonitoring = ko.observable(data.GroundwaterMonitoring);\r\n\t\tself.receivingWaterMonitoring = ko.observable(data.ReceivingWaterMonitoring);\r\n\t\tself.additionalInformation = ko.observable(data.AdditionalInformation);\r\n\t} else {\r\n\t\tself.version = ko.observable(0);\r\n\t\tself.isDraft = ko.observable(false);\r\n\t\tself.beingEditedBy = ko.observable(null);\r\n\t\tself.type = ko.observable(null);\r\n\t\tself.licenceId = ko.observable(\"00000000-0000-0000-0000-000000000000\");\r\n\t\tself.regNo = ko.observable(null);\r\n\t\tself.agglomeration = ko.observable(null);\r\n\t\tself.agglomerationPeId = ko.observable(null);\r\n\t\tself.agglomerationPe = ko.observable(null);\r\n\t\tself.licensee = ko.observable(null);\r\n\t\tself.oclrInspector = ko.observable(null);\r\n\t\tself.oclrTeamAdmin = ko.observable(null);\r\n\t\tself.oclrAdministrators = ko.observable(null);\r\n\t\tself.introduction = ko.observable(null);\r\n\t\tself.glossary = ko.observable(null);\r\n\t\tself.decision = ko.observable(null);\r\n\t\tself.scheduleDischarges = ko.observable(null);\r\n\t\tself.environmentalReport = ko.observable(null);\r\n\t\tself.improvement = ko.observable(null);\r\n\t\tself.condition1 = ko.observable(null);\r\n\t\tself.condition2 = ko.observable(null);\r\n\t\tself.condition3 = ko.observable(null);\r\n\t\tself.condition4 = ko.observable(null);\r\n\t\tself.condition5 = ko.observable(null);\r\n\t\tself.condition6 = ko.observable(null);\r\n\t\tself.condition7 = ko.observable(null);\r\n\t\tself.discontinued = ko.observable(null);\r\n\t\tself.primaryDischarge = ko.observable(null);\r\n\t\tself.secondaryDischarge = ko.observable(null);\r\n\t\tself.storWaterOverflow = ko.observable(null);\r\n\t\tself.groundwaterMonitoring = ko.observable(null);\r\n\t\tself.receivingWaterMonitoring = ko.observable(null);\r\n\t\tself.additionalInformation = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar Condition1Input = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.reason = ko.observable(data.Reason);\r\n\t\tself.conditions = ko.observable(data.Conditions);\r\n\t\tself.order = ko.observable(data.Order);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.reason = ko.observable(null);\r\n\t\tself.conditions = ko.observable(null);\r\n\t\tself.order = ko.observable(0);\r\n\t}\r\n\r\n};\r\n\r\nvar Condition2Input = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.reason = ko.observable(data.Reason);\r\n\t\tself.conditions = ko.observable(data.Conditions);\r\n\t\tself.order = ko.observable(data.Order);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.reason = ko.observable(null);\r\n\t\tself.conditions = ko.observable(null);\r\n\t\tself.order = ko.observable(0);\r\n\t}\r\n\r\n};\r\n\r\nvar Condition3Input = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.reason = ko.observable(data.Reason);\r\n\t\tself.conditions = ko.observable(data.Conditions);\r\n\t\tself.order = ko.observable(data.Order);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.reason = ko.observable(null);\r\n\t\tself.conditions = ko.observable(null);\r\n\t\tself.order = ko.observable(0);\r\n\t}\r\n\r\n};\r\n\r\nvar Condition4Input = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.reason = ko.observable(data.Reason);\r\n\t\tself.conditions = ko.observable(data.Conditions);\r\n\t\tself.order = ko.observable(data.Order);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.reason = ko.observable(null);\r\n\t\tself.conditions = ko.observable(null);\r\n\t\tself.order = ko.observable(0);\r\n\t}\r\n\r\n};\r\n\r\nvar Condition5Input = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.reason = ko.observable(data.Reason);\r\n\t\tself.conditions = ko.observable(data.Conditions);\r\n\t\tself.order = ko.observable(data.Order);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.reason = ko.observable(null);\r\n\t\tself.conditions = ko.observable(null);\r\n\t\tself.order = ko.observable(0);\r\n\t}\r\n\r\n};\r\n\r\nvar Condition6Input = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.reason = ko.observable(data.Reason);\r\n\t\tself.conditions = ko.observable(data.Conditions);\r\n\t\tself.order = ko.observable(data.Order);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.reason = ko.observable(null);\r\n\t\tself.conditions = ko.observable(null);\r\n\t\tself.order = ko.observable(0);\r\n\t}\r\n\r\n};\r\n\r\nvar Condition7Input = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.reason = ko.observable(data.Reason);\r\n\t\tself.conditions = ko.observable(data.Conditions);\r\n\t\tself.order = ko.observable(data.Order);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.reason = ko.observable(null);\r\n\t\tself.conditions = ko.observable(null);\r\n\t\tself.order = ko.observable(0);\r\n\t}\r\n\r\n};\r\n\r\nvar AdditionalInformationInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.label = ko.observable(data.Label);\r\n\t\tself.person = ko.observable(data.Person);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.label = ko.observable(null);\r\n\t\tself.person = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar GroundwaterMonitoringInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.items = ko.observable(data.Items);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.items = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar GroundWater = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.items = ko.observable(data.Items);\r\n\t\tself.parameters = ko.observable(data.Parameters);\r\n\t} else {\r\n\t\tself.items = ko.observable(null);\r\n\t\tself.parameters = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar GroundWaterItem = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.id = ko.observable(data.Id);\r\n\t\tself.edenCode = ko.observable(data.EdenCode);\r\n\t\tself.licenceCode = ko.observable(data.LicenceCode);\r\n\t\tself.northing = ko.observable(data.Northing);\r\n\t\tself.easting = ko.observable(data.Easting);\r\n\t\tself.waterName = ko.observable(data.WaterName);\r\n\t\tself.wfdCode = ko.observable(data.WfdCode);\r\n\t} else {\r\n\t\tself.id = ko.observable(\"00000000-0000-0000-0000-000000000000\");\r\n\t\tself.edenCode = ko.observable(null);\r\n\t\tself.licenceCode = ko.observable(null);\r\n\t\tself.northing = ko.observable(null);\r\n\t\tself.easting = ko.observable(null);\r\n\t\tself.waterName = ko.observable(null);\r\n\t\tself.wfdCode = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar MonitoringParameter = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.id = ko.observable(data.Id);\r\n\t\tself.unit = ko.observable(data.Unit);\r\n\t\tself.unitId = ko.observable(data.UnitId);\r\n\t\tself.name = ko.observable(data.Name);\r\n\t\tself.analysisMethod = ko.observable(data.AnalysisMethod);\r\n\t\tself.monitoringFreqency = ko.observable(data.MonitoringFreqency);\r\n\t} else {\r\n\t\tself.id = ko.observable(0);\r\n\t\tself.unit = ko.observable(null);\r\n\t\tself.unitId = ko.observable(0);\r\n\t\tself.name = ko.observable(null);\r\n\t\tself.analysisMethod = ko.observable(null);\r\n\t\tself.monitoringFreqency = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar ReceivingWaterMonitoringInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.items = ko.observable(data.Items);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.items = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar ReceivingWater = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.items = ko.observable(data.Items);\r\n\t\tself.parameters = ko.observable(data.Parameters);\r\n\t} else {\r\n\t\tself.items = ko.observable(null);\r\n\t\tself.parameters = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar ReceivingWaterItem = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.id = ko.observable(data.Id);\r\n\t\tself.edenCode = ko.observable(data.EdenCode);\r\n\t\tself.licenceCode = ko.observable(data.LicenceCode);\r\n\t\tself.northing = ko.observable(data.Northing);\r\n\t\tself.easting = ko.observable(data.Easting);\r\n\t\tself.waterName = ko.observable(data.WaterName);\r\n\t\tself.wfdCode = ko.observable(data.WfdCode);\r\n\t} else {\r\n\t\tself.id = ko.observable(\"00000000-0000-0000-0000-000000000000\");\r\n\t\tself.edenCode = ko.observable(null);\r\n\t\tself.licenceCode = ko.observable(null);\r\n\t\tself.northing = ko.observable(null);\r\n\t\tself.easting = ko.observable(null);\r\n\t\tself.waterName = ko.observable(null);\r\n\t\tself.wfdCode = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar PrimaryDischargeInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.items = ko.observable(data.Items);\r\n\t\tself.help = ko.observable(data.Help);\r\n\t} else {\r\n\t\tself.items = ko.observable(null);\r\n\t\tself.help = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar PrimiaryDischargeItem = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.id = ko.observable(data.Id);\r\n\t\tself.edenCode = ko.observable(data.EdenCode);\r\n\t\tself.licenceCode = ko.observable(data.LicenceCode);\r\n\t\tself.dischargeNorthing = ko.observable(data.DischargeNorthing);\r\n\t\tself.dischargeEasting = ko.observable(data.DischargeEasting);\r\n\t\tself.monitoringNorthing = ko.observable(data.MonitoringNorthing);\r\n\t\tself.monitoringEasting = ko.observable(data.MonitoringEasting);\r\n\t\tself.waterName = ko.observable(data.WaterName);\r\n\t\tself.wfdCode = ko.observable(data.WfdCode);\r\n\t\tself.compositeSampling = ko.observable(data.CompositeSampling);\r\n\t\tself.elvBased = ko.observable(data.ElvBased);\r\n\t\tself.elvs = ko.observable(data.Elvs);\r\n\t} else {\r\n\t\tself.id = ko.observable(\"00000000-0000-0000-0000-000000000000\");\r\n\t\tself.edenCode = ko.observable(null);\r\n\t\tself.licenceCode = ko.observable(null);\r\n\t\tself.dischargeNorthing = ko.observable(null);\r\n\t\tself.dischargeEasting = ko.observable(null);\r\n\t\tself.monitoringNorthing = ko.observable(null);\r\n\t\tself.monitoringEasting = ko.observable(null);\r\n\t\tself.waterName = ko.observable(null);\r\n\t\tself.wfdCode = ko.observable(null);\r\n\t\tself.compositeSampling = ko.observable(null);\r\n\t\tself.elvBased = ko.observable(null);\r\n\t\tself.elvs = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar ElvParamterItem = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.id = ko.observable(data.Id);\r\n\t\tself.unit = ko.observable(data.Unit);\r\n\t\tself.unitId = ko.observable(data.UnitId);\r\n\t\tself.name = ko.observable(data.Name);\r\n\t\tself.commencementDate = ko.observable(data.CommencementDate);\r\n\t\tself.analysisMethod = ko.observable(data.AnalysisMethod);\r\n\t\tself.samplingMethod = ko.observable(data.SamplingMethod);\r\n\t\tself.monitoringFreqency = ko.observable(data.MonitoringFreqency);\r\n\t\tself.maxAllowableDiscreteExcess = ko.observable(data.MaxAllowableDiscreteExcess);\r\n\t\tself.maxAllowableCompositeExcess = ko.observable(data.MaxAllowableCompositeExcess);\r\n\t\tself.value = ko.observable(data.Value);\r\n\t\tself.interimValue = ko.observable(data.InterimValue);\r\n\t} else {\r\n\t\tself.id = ko.observable(0);\r\n\t\tself.unit = ko.observable(null);\r\n\t\tself.unitId = ko.observable(0);\r\n\t\tself.name = ko.observable(null);\r\n\t\tself.commencementDate = ko.observable(null);\r\n\t\tself.analysisMethod = ko.observable(null);\r\n\t\tself.samplingMethod = ko.observable(null);\r\n\t\tself.monitoringFreqency = ko.observable(null);\r\n\t\tself.maxAllowableDiscreteExcess = ko.observable(null);\r\n\t\tself.maxAllowableCompositeExcess = ko.observable(null);\r\n\t\tself.value = ko.observable(null);\r\n\t\tself.interimValue = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar SecondaryDischargeInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.items = ko.observable(data.Items);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.items = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar SecondaryDischarge = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.items = ko.observable(data.Items);\r\n\t\tself.elvs = ko.observable(data.Elvs);\r\n\t\tself.elvBased = ko.observable(data.ElvBased);\r\n\t\tself.id = ko.observable(data.Id);\r\n\t} else {\r\n\t\tself.items = ko.observable(null);\r\n\t\tself.elvs = ko.observable(null);\r\n\t\tself.elvBased = ko.observable(null);\r\n\t\tself.id = ko.observable(\"00000000-0000-0000-0000-000000000000\");\r\n\t}\r\n\r\n};\r\n\r\nvar SecondaryDischargeItem = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.id = ko.observable(data.Id);\r\n\t\tself.edenCode = ko.observable(data.EdenCode);\r\n\t\tself.licenceCode = ko.observable(data.LicenceCode);\r\n\t\tself.dischargeNorthing = ko.observable(data.DischargeNorthing);\r\n\t\tself.dischargeEasting = ko.observable(data.DischargeEasting);\r\n\t\tself.monitoringNorthing = ko.observable(data.MonitoringNorthing);\r\n\t\tself.monitoringEasting = ko.observable(data.MonitoringEasting);\r\n\t\tself.waterName = ko.observable(data.WaterName);\r\n\t\tself.wfdCode = ko.observable(data.WfdCode);\r\n\t\tself.compositeSampling = ko.observable(data.CompositeSampling);\r\n\t} else {\r\n\t\tself.id = ko.observable(\"00000000-0000-0000-0000-000000000000\");\r\n\t\tself.edenCode = ko.observable(null);\r\n\t\tself.licenceCode = ko.observable(null);\r\n\t\tself.dischargeNorthing = ko.observable(null);\r\n\t\tself.dischargeEasting = ko.observable(null);\r\n\t\tself.monitoringNorthing = ko.observable(null);\r\n\t\tself.monitoringEasting = ko.observable(null);\r\n\t\tself.waterName = ko.observable(null);\r\n\t\tself.wfdCode = ko.observable(null);\r\n\t\tself.compositeSampling = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar StormWaterOverflowInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.items = ko.observable(data.Items);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.items = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar StormWaterOverflowItem = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.id = ko.observable(data.Id);\r\n\t\tself.edenCode = ko.observable(data.EdenCode);\r\n\t\tself.licenceCode = ko.observable(data.LicenceCode);\r\n\t\tself.northing = ko.observable(data.Northing);\r\n\t\tself.easting = ko.observable(data.Easting);\r\n\t\tself.waterName = ko.observable(data.WaterName);\r\n\t\tself.wfdCode = ko.observable(data.WfdCode);\r\n\t} else {\r\n\t\tself.id = ko.observable(\"00000000-0000-0000-0000-000000000000\");\r\n\t\tself.edenCode = ko.observable(null);\r\n\t\tself.licenceCode = ko.observable(null);\r\n\t\tself.northing = ko.observable(null);\r\n\t\tself.easting = ko.observable(null);\r\n\t\tself.waterName = ko.observable(null);\r\n\t\tself.wfdCode = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar DisconinuedInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.discontinuations = ko.observable(data.Discontinuations);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.discontinuations = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar DiscontinuedItem = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.edenCode = ko.observable(data.EdenCode);\r\n\t\tself.licenceCode = ko.observable(data.LicenceCode);\r\n\t\tself.type = ko.observable(data.Type);\r\n\t\tself.action = ko.observable(data.Action);\r\n\t\tself.actionDate = ko.observable(data.ActionDate);\r\n\t\tself.relatedCondition = ko.observable(data.RelatedCondition);\r\n\t} else {\r\n\t\tself.edenCode = ko.observable(null);\r\n\t\tself.licenceCode = ko.observable(null);\r\n\t\tself.type = ko.observable(null);\r\n\t\tself.action = ko.observable(null);\r\n\t\tself.actionDate = ko.observable(null);\r\n\t\tself.relatedCondition = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar ImprovementInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.improvements = ko.observable(data.Improvements);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.improvements = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar ImprovementItem = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.location = ko.observable(data.Location);\r\n\t\tself.type = ko.observable(data.Type);\r\n\t\tself.improvement = ko.observable(data.Improvement);\r\n\t\tself.sourceOfFounding = ko.observable(data.SourceOfFounding);\r\n\t\tself.relatedCondition = ko.observable(data.RelatedCondition);\r\n\t\tself.completionDate = ko.observable(data.CompletionDate);\r\n\t} else {\r\n\t\tself.location = ko.observable(null);\r\n\t\tself.type = ko.observable(null);\r\n\t\tself.improvement = ko.observable(null);\r\n\t\tself.sourceOfFounding = ko.observable(null);\r\n\t\tself.relatedCondition = ko.observable(null);\r\n\t\tself.completionDate = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar EnvironmentalReportInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.environmentalReport = ko.observable(data.EnvironmentalReport);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.environmentalReport = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar ScheduleDischargesInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.legislationStatement = ko.observable(data.LegislationStatement);\r\n\t\tself.dischargePeDetails = ko.observable(data.DischargePeDetails);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.legislationStatement = ko.observable(null);\r\n\t\tself.dischargePeDetails = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar GlossaryInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.glossary = ko.observable(data.Glossary);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.glossary = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar GlossaryItem = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.term = ko.observable(data.Term);\r\n\t\tself.definition = ko.observable(data.Definition);\r\n\t} else {\r\n\t\tself.term = ko.observable(null);\r\n\t\tself.definition = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar IntroductionInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.introduction = ko.observable(data.Introduction);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.introduction = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\nvar DecisionInput = function (data) {\r\n\tvar self = this;\r\n\r\n\tif (data) {\r\n\t\tself.help = ko.observable(data.Help);\r\n\t\tself.decision = ko.observable(data.Decision);\r\n\t} else {\r\n\t\tself.help = ko.observable(null);\r\n\t\tself.decision = ko.observable(null);\r\n\t}\r\n\r\n};\r\n\r\n",
  "Errors": [],
  "Code": null
} 
